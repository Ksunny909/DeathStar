"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
var Slider = /**
 * Slider:
 *      Component.
 */ /*#__PURE__*/ function(_Component) {
    "use strict";
    _inherits(Slider, _Component);
    var _super = _createSuper(Slider);
    function Slider(props) {
        _classCallCheck(this, Slider);
        var _this;
        _this = _super.call(this, props);
        _this.sliderRootRef = /*#__PURE__*/ _react.default.createRef();
        _this.sliderTrackRef = /*#__PURE__*/ _react.default.createRef();
        _this.btnRef = /*#__PURE__*/ _react.default.createRef();
        _this.railRef = /*#__PURE__*/ _react.default.createRef();
        _this.sliderValueRef = /*#__PURE__*/ _react.default.createRef();
        _this.sliderTextRef = /*#__PURE__*/ _react.default.createRef();
        _this.state = {
            value: _this.props.value,
            clicked: false
        };
        _this.handleMouseDown = _this.handleMouseDown.bind(_assertThisInitialized(_this));
        _this.handleMouseUp = _this.handleMouseUp.bind(_assertThisInitialized(_this));
        _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));
        _this.handleRailClick = _this.handleRailClick.bind(_assertThisInitialized(_this));
        return _this;
    }
    _createClass(Slider, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this = this;
                this.sliderRootRef.current.style.width = this.props.width + 'px';
                var root = this.btnRef.current;
                var track = this.sliderTrackRef.current;
                var position = this.state.value * this.props.width / 100;
                this.sliderValueRef.current.innerHTML = this.state.value;
                track.style.width = this.state.value + '%';
                root.style.left = position + 'px';
                var btn_indicator = this.btnRef.current;
                var rail = this.railRef.current;
                btn_indicator.addEventListener('mousedown', this.handleMouseDown);
                rail.addEventListener('click', function(e) {
                    return _this.handleRailClick(e);
                });
                document.addEventListener('mousemove', function(e) {
                    return _this.handleMouseMove(e);
                });
                document.addEventListener('mouseup', this.handleMouseUp);
            }
        },
        {
            key: "handleRailClick",
            value: function handleRailClick(e) {
                if (!this.props.disabled) {
                    var clickPosition = e.pageX - 12;
                    var root = this.btnRef.current;
                    var track = this.sliderTrackRef.current;
                    var rect = root.getBoundingClientRect();
                    var railValue = root.offsetLeft + clickPosition - rect.x;
                    var trackValue = Math.floor(railValue / this.props.width * 100);
                    this.setState({
                        value: trackValue
                    });
                    this.sliderValueRef.current.innerHTML = trackValue;
                    track.style.width = trackValue + '%';
                    root.style.left = railValue + 'px';
                }
            }
        },
        {
            key: "handleMouseDown",
            value: function handleMouseDown() {
                if (!this.props.disabled) {
                    this.setState({
                        clicked: true
                    });
                }
            }
        },
        {
            key: "handleMouseUp",
            value: function handleMouseUp() {
                if (!this.props.disabled) {
                    this.setState({
                        clicked: false
                    });
                }
            }
        },
        {
            key: "handleMouseMove",
            value: function handleMouseMove(e) {
                if (!this.props.disabled) {
                    if (this.state.clicked) {
                        var root = this.btnRef.current;
                        var track = this.sliderTrackRef.current;
                        var rect = root.getBoundingClientRect();
                        var dif = e.pageX - rect.x;
                        var position, raisedValue;
                        if (dif > 0 && root.offsetLeft >= this.props.width) {
                            position = this.props.width;
                            raisedValue = 100;
                        } else if (dif < 0 && root.offsetLeft <= 0) {
                            position = 0;
                            raisedValue = 0;
                        } else {
                            var raise = root.offsetLeft;
                            raisedValue = Math.floor(raise / this.props.width * 100);
                            position = root.offsetLeft + dif;
                        }
                        this.setState({
                            value: raisedValue
                        });
                        track.style.width = raisedValue + '%';
                        root.style.left = position + 'px';
                        this.sliderValueRef.current.innerHTML = raisedValue;
                    }
                }
            }
        },
        {
            key: "btnClass",
            value: function btnClass() {
                if (this.state.clicked) return 'dcx-slider-indicator-btn dcx-slider-indicator-btn-click';
                else return 'dcx-slider-indicator-btn';
            }
        },
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _react.default.createElement("span", {
                    ref: this.sliderRootRef,
                    className: "dcx-slider-root " + (this.props.disabled ? 'disabled' : 'enabled')
                }, /*#__PURE__*/ _react.default.createElement("span", {
                    ref: this.railRef,
                    className: "dcx-slider-track " + (this.props.disabled ? 'disabled' : '')
                }, /*#__PURE__*/ _react.default.createElement("span", {
                    ref: this.sliderTrackRef
                }, " ")), /*#__PURE__*/ _react.default.createElement("span", {
                    ref: this.btnRef,
                    className: "dcx-slider-indicator-root " + (this.props.disabled ? 'disabled' : 'enabled')
                }, /*#__PURE__*/ _react.default.createElement("span", {
                    className: this.btnClass()
                }, " "), /*#__PURE__*/ _react.default.createElement("span", {
                    className: "dcx-slider-indicator-ripple " + (this.props.disabled ? 'disabled' : '')
                }, " "), /*#__PURE__*/ _react.default.createElement("span", {
                    ref: this.sliderTextRef,
                    className: "dcx-slider-text-indicator-root " + (this.props.disabled ? 'disabled' : '')
                }, /*#__PURE__*/ _react.default.createElement("span", {
                    ref: this.sliderValueRef,
                    className: "value"
                }, " "))), /*#__PURE__*/ _react.default.createElement("span", {
                    className: "dcx-slider-rail " + (this.props.disabled ? 'disabled' : '')
                }, " ")));
            }
        }
    ]);
    return Slider;
}(_react.default.Component);
// function isNumeric(value, propName) {
//     const regex = /^[+-]?((\d*\.?\d+)|(\d+\.?\d*))$/;
//     if (Number.isFinite(value) || ((typeof value === "string") && regex.test(value)))
//         return true;
//     else
//         new Error(`Invalid prop \`${propName}\` passed to \`Slider\`. Prop can be the \`number\`. Validation failed.`);
// }
// let minWidth = (value, propName) => {
//     if (value < 100)
//         return Error (`Invalid value of \`${propName}\` passed to \`Slider\`. Value can't less to \`100\`. Validation failed.`);
// };
// function validatedType(...validators) {
//     return function(props, propName, componentName) {
//         const value = props[propName];
//         return validators.every(validator => {
//             if (typeof validator === "function") {
//                 return validator(value, propName);
//             }
//             return false;
//         });
//         // return valid;
//     }
// }
Slider.propTypes = {
    disabled: _propTypes.default.bool,
    value: _propTypes.default.number,
    width: _propTypes.default.number
};
Slider.defaultProps = {
    disabled: false,
    value: 0,
    width: 255
};
var _default = Slider;
exports.default = _default;
