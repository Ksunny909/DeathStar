"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Countdown = exports.CountdownItem = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _js = require("../js");
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
var CountdownItem = function(props) {
    var type = props.type, text = props.text, max = props.max, value = props.value, className = props.className, reverse = props.reverse;
    var ref = _react.default.useState(new Date()), date = ref[0], setDate = ref[1];
    var ref1 = _react.default.useState(props.visible !== undefined ? props.visible : true), visible = ref1[0], setVisible = ref1[1];
    var ref2 = _react.default.useState(false), ready = ref2[0], setReady = ref2[1];
    var ref3 = _react.default.useState("dcx-preloader dcx-preloader__circular"), classe = ref3[0], setClasse = ref3[1];
    var ref4 = _react.default.useState(text !== undefined), withLabel = ref4[0], setWithLabel = ref4[1];
    var init = function() {
        switch(type){
            case "day":
                var days = max - date.getDate();
                setValue(days);
                break;
            case "hour":
                var hour = max - date.getHours();
                setValue(hour);
                break;
            case "minute":
                var minutes = max - date.getMinutes();
                setValue(minutes);
                break;
            case "second":
                var second = max - date.getSeconds();
                setValue(second);
                break;
            case "other":
                setValue(currVal);
                break;
            default:
                break;
        }
    };
    var getReady = function() {
        var size = props.size, color = props.color;
        size = _js.DCutilities.isDefined(size, "");
        color = _js.DCutilities.isDefined(color, "");
        var sizeClasse = "", colorClasse = "";
        if (size.trim() === "small") sizeClasse = "__size-small";
        else if (size.trim() === "big") sizeClasse = "__size-big";
        switch(color){
            case 'red':
                colorClasse = "__color-red";
                break;
            case 'green':
                colorClasse = "__color-green";
                break;
            case 'fade':
                colorClasse = "__color-fade";
                break;
            default:
                break;
        }
        setClasse(classe + " " + colorClasse + " " + sizeClasse + " __determinate __countdown");
        setReady(true);
    };
    _react.default.useEffect(function() {
        //init();
        if (!ready) getReady();
    }, []);
    var changeDate = function() {
        setDate(new Date());
        setTimeout(function() {
            return changeDate();
        });
    };
    var setIndicator = function() {
        var ret = 126.92 - value * 126.92 / max;
        if (reverse) {
            ret = max - value;
            ret = 126.92 - ret * 126.92 / max;
        }
        return ret;
    };
    if (visible && ready) {
        return(/*#__PURE__*/ _react.default.createElement("span", _extends({}, props, {
            className: classe + " " + _js.DCutilities.isDefined(className, ""),
            "aria-valuenow": value,
            role: "progressbar"
        }), /*#__PURE__*/ _react.default.createElement("svg", {
            className: "dcx-preloader__svg",
            viewBox: "22 22 44 44"
        }, /*#__PURE__*/ _react.default.createElement("circle", {
            className: "dcx-preloader__circle __determinate",
            cx: "44",
            cy: "44",
            r: "20.2",
            fill: "rgba(0,0,0,.1)",
            strokeWidth: 1.5,
            style: {
                strokeDasharray: "126.92",
                strokeDashoffset: setIndicator() + "px"
            }
        })), /*#__PURE__*/ _react.default.createElement("div", {
            className: "dcx-preloader__label"
        }, /*#__PURE__*/ _react.default.createElement("span", {
            className: "__value"
        }, value), withLabel ? /*#__PURE__*/ _react.default.createElement("span", null, text) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null))));
    } else {
        return(/*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null));
    }
};
CountdownItem.propTypes = {
    type: _propTypes.default.string,
    text: _propTypes.default.string,
    max: _propTypes.default.number.isRequired,
    value: _propTypes.default.number.isRequired,
    className: _propTypes.default.string,
    reverse: _propTypes.default.bool
};
var Countdown = /*#__PURE__*/ function(_PureComponent) {
    "use strict";
    _inherits(Countdown, _PureComponent);
    var _super = _createSuper(Countdown);
    function Countdown(props) {
        _classCallCheck(this, Countdown);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "timer", -1);
        _this.state = {
            date: new Date(),
            ready: false,
            eventDate: props.endDate !== undefined ? new Date(props.endDate) : new Date(),
            startDate: props.startDate !== undefined ? new Date(props.startDate) : new Date(),
            seconds: 60,
            text: {
                hour: "Hour(s)",
                minute: "Minute(s)",
                day: "Day(s)",
                second: "Second(s)"
            },
            classe: {
                hour: "cp-theme",
                minute: "cq-theme",
                day: undefined,
                second: "__color-green"
            }
        };
        return _this;
    }
    _createClass(Countdown, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (this.timer === -1) {
                    var _this = this;
                    this.timer = setInterval(function() {
                        var seconds = _this.state.seconds;
                        seconds = seconds <= 1 ? 60 : seconds - 1;
                        _this.setState({
                            date: new Date(),
                            seconds: seconds
                        });
                    }, 1000);
                } else clearInterval(this.timer);
            }
        },
        {
            key: "getLeft",
            value: function getLeft(_type) {
                var timestamp = this.state.eventDate.getTime() - this.state.date.getTime();
                return Math.floor(timestamp / _type);
            }
        },
        {
            key: "getDure",
            value: function getDure(_type) {
                var timestamp = this.state.eventDate.getTime() - this.state.startDate.getTime();
                return Math.floor(timestamp / _type);
            }
        },
        {
            /**
     * 
     * @param {{day: string, hour: string, minute: string, second: string}} _obj
     */ key: "setText",
            value: function setText(_obj) {
                this.setState({
                    text: _obj
                });
            }
        },
        {
            /**
     * 
     * @param {{day: string, hour: string, minute: string, second: string}} _obj
     */ key: "setClasse",
            value: function setClasse(_obj) {
                this.setState({
                    text: _obj
                });
            }
        },
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _react.default.createElement("div", null, /*#__PURE__*/ _react.default.createElement(CountdownItem, {
                    max: this.getDure(24 * 60 * 60 * 1000),
                    text: this.state.text.day,
                    size: "big",
                    value: this.getLeft(24 * 60 * 60 * 1000),
                    reverse: true,
                    className: this.state.classe.day
                }), /*#__PURE__*/ _react.default.createElement(CountdownItem, {
                    max: 24,
                    text: this.state.text.hour,
                    size: "big",
                    value: 24 - this.state.date.getHours(),
                    reverse: true,
                    className: this.state.classe.hour
                }), /*#__PURE__*/ _react.default.createElement(CountdownItem, {
                    max: 60,
                    text: this.state.text.minute,
                    size: "big",
                    value: 60 - this.state.date.getMinutes(),
                    reverse: true,
                    className: this.state.classe.minute
                }), /*#__PURE__*/ _react.default.createElement(CountdownItem, {
                    max: 60,
                    text: this.state.text.second,
                    size: "big",
                    value: 60 - this.state.date.getSeconds(),
                    reverse: true,
                    className: this.state.classe.second
                })));
            }
        }
    ]);
    return Countdown;
}(_react.default.PureComponent);
Countdown.propTypes = {
    startDate: _propTypes.default.string.isRequired,
    endDate: _propTypes.default.string.isRequired
};
exports.CountdownItem = CountdownItem;
exports.Countdown = Countdown;
