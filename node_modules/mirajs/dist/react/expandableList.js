"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExpandableListItem = exports.ExpandableList = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ExpandableList = function(props) {
    var children = props.children;
    return(/*#__PURE__*/ _react.default.createElement("div", {
        className: "dcx-expandable-list " + (props.expanded ? 'expanded' : '')
    }, /*#__PURE__*/ _react.default.createElement("ul", {
        className: "list-group"
    }, children.map(function(child) {
        /*#__PURE__*/ return _react.default.createElement("li", {
            className: "list-item"
        }, child);
    }))));
};
ExpandableList.propTypes = {
    expanded: _propTypes.default.bool,
    itemClick: _propTypes.default.func
};
ExpandableList.defaultProps = {
    expanded: false,
    itemClick: undefined
};
var ExpandableListItem = function(props) {
    var ref = _react.default.useState(false), isExpanded = ref[0], setExpanded = ref[1];
    var id = props.id, title = props.title, subList = props.subList, parent_is = props.parent_is, nbChild = props.nbChild, item1 = props.item;
    var setIcon = function() {
        var nbItems = nbChild;
        if (subList.length > 0) nbItems = subList.length;
        if (nbItems > 0) return(/*#__PURE__*/ _react.default.createElement("i", {
            className: "" + (isExpanded ? 'DGfi-arrow_drop_down' : 'DGfi-arrow_right')
        }, " "));
        else return(/*#__PURE__*/ _react.default.createElement("i", {
            style: {
                minWidth: "20px"
            }
        }, "\xa0"));
    };
    var setLength = function() {
        var nbItems = nbChild;
        if (subList.length > 0) nbItems = subList.length;
        return nbItems > 0 ? /*#__PURE__*/ _react.default.createElement("div", {
            className: "item-count"
        }, nbItems) : "";
    };
    var handleClick = function(_item) {
        setExpanded(!isExpanded);
        props.itemClick(_item, isExpanded);
    };
    var setSubList = function(_isExpanded) {
        if (subList.length > 0) return(/*#__PURE__*/ _react.default.createElement(ExpandableList, {
            expanded: _isExpanded
        }, subList.map(function(item) {
            /*#__PURE__*/ return _react.default.createElement(ExpandableListItem, {
                id: item.id,
                parent_is: _isExpanded,
                itemClick: props.itemClick,
                title: item.title,
                subList: item.subList,
                nbChild: item.nbChild,
                item: item
            });
        })));
    };
    return(/*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        onClick: function() {
            return handleClick(item1);
        },
        className: "dcx-expandable-list-item " + (isExpanded && parent_is ? 'expanded' : '')
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: "expandable-icon"
    }, setIcon()), /*#__PURE__*/ _react.default.createElement("div", {
        className: "expandable-title"
    }, title), setLength()), setSubList(isExpanded)));
};
ExpandableListItem.propTypes = {
    id: _propTypes.default.string,
    title: _propTypes.default.string,
    subList: _propTypes.default.array,
    parent_is: _propTypes.default.bool
};
ExpandableListItem.defaultProps = {
    id: '',
    title: '',
    subList: [],
    parent_is: false
};
exports.ExpandableList = ExpandableList;
exports.ExpandableListItem = ExpandableListItem;
