"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
var Pagination = /*#__PURE__*/ function(_Component) {
    "use strict";
    _inherits(Pagination, _Component);
    var _super = _createSuper(Pagination);
    function Pagination(props) {
        _classCallCheck(this, Pagination);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), /**
     * Fonction qui permet de changer la position de la page courante.
     * @param _val Nouvelle position.
     */ "setNewItemPosition", function(_val) {
            if (_this.props.disabled) return;
            _this.setState(function(state) {
                var new_val = state.currentPage + _val;
                if (new_val <= _this.props.count && new_val >= 1) return {
                    currentPage: new_val
                };
            });
        });
        _this.state = {
            currentPage: _this.props.currentPage,
            items: _this.setInitialPosition()
        };
        _this.setNewItemPosition = _this.setNewItemPosition.bind(_assertThisInitialized(_this));
        _this.changeItemPosition = _this.changeItemPosition.bind(_assertThisInitialized(_this));
        return _this;
    }
    _createClass(Pagination, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.changeItemPosition();
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState, snapshot) {
                if (prevState.currentPage !== this.state.currentPage) {
                    this.props.onChange(this.state.currentPage);
                    this.changeItemPosition();
                }
            }
        },
        {
            /**
     * Fonction qui peremt de changer la position des items en fonction de la page courante.
     */ key: "changeItemPosition",
            value: function changeItemPosition() {
                var pivot = this.state.currentPage;
                var count = this.props.count;
                if (pivot < 5) this.setState({
                    items: this.setInitialPosition()
                });
                else if (pivot <= count - 4) this.setState({
                    items: this.enabledMiddle()
                });
                else this.setState({
                    items: this.setAllToRight()
                });
            }
        },
        {
            /**
     * Fonction qui pemret de paginer le milieu.
     * @returns {Array} Nouveau tableau de position.
     */ key: "enabledMiddle",
            value: function enabledMiddle() {
                var array = [];
                var pivot = this.state.currentPage;
                var count = this.props.count;
                array.push(1);
                array.push(-1);
                array.push(pivot - 1);
                array.push(pivot);
                array.push(pivot + 1);
                array.push(-1);
                array.push(count);
                return array;
            }
        },
        {
            /**
     * Fonction qui permet d'initialiser les position de la pagination.
     * @returns {Array} Tableaux de positions initial.
     */ key: "setInitialPosition",
            value: function setInitialPosition() {
                var array = [];
                var count = this.props.count;
                for(var i = 1; i <= count; i++){
                    if (i <= 5) array.push(i);
                    else if (i === count) {
                        if (array[array.length - 1] !== count - 1) array.push(-1);
                        array.push(i);
                    }
                }
                return array;
            }
        },
        {
            /**
     * Fonction qui pemret de positionner le max d'item vers la droite de la pagination.
     * @returns {Array} Nouveau tableau.
     */ key: "setAllToRight",
            value: function setAllToRight() {
                var array = [];
                var count = this.props.count;
                if (count <= 7) for(var i = 1; i <= count; i++)array.push(i);
                else {
                    array.push(1);
                    array.push(-1);
                    var pointer = count - 5;
                    for(var i1 = 2; i1 <= count; i1++){
                        if (i1 > pointer) array.push(i1);
                    }
                }
                return array;
            }
        },
        {
            key: "setColor",
            value: function setColor() {
                if (this.props.color === "primary") return 'dcx-pagination-primary';
                else if (this.props.color === "danger") return 'dcx-pagination-danger';
            }
        },
        {
            key: "setCurrentPage",
            value: function setCurrentPage(_position) {
                var _this = this;
                if (_position === this.state.currentPage) return(/*#__PURE__*/ _react.default.createElement("li", {
                    key: _position
                }, /*#__PURE__*/ _react.default.createElement("button", {
                    onClick: function() {
                        if (_this.props.disabled) return;
                        return _this.setState({
                            currentPage: _position
                        });
                    },
                    className: "dcx-pagination-btn dcx-paginationItem-page " + this.props.size + " " + this.setColor() + " " + (this.props.disabled ? 'disabled' : ''),
                    "aria-current": true,
                    tabIndex: 0,
                    type: "button",
                    "aria-label": "Go to page " + _position
                }, _position)));
                else return(/*#__PURE__*/ _react.default.createElement("li", {
                    key: _position
                }, /*#__PURE__*/ _react.default.createElement("button", {
                    onClick: function() {
                        if (_this.props.disabled) return;
                        return _this.setState({
                            currentPage: _position
                        });
                    },
                    className: "dcx-pagination-btn dcx-paginationItem-page " + this.props.size + " " + (this.props.disabled ? 'disabled' : ''),
                    tabIndex: 0,
                    type: "button",
                    "aria-label": "Go to page " + _position
                }, _position)));
            }
        },
        {
            key: "buildPaginationItems",
            value: function buildPaginationItems() {
                var _this = this;
                var items = [];
                if (!this.props.hideNextButton) items.push(/*#__PURE__*/ _react.default.createElement("li", {
                    key: 0
                }, /*#__PURE__*/ _react.default.createElement("button", {
                    onClick: function() {
                        return _this.setNewItemPosition(-1);
                    },
                    className: "dcx-pagination-btn dcx-paginationItem-page " + this.props.size + " " + (this.state.currentPage === 1 || this.props.disabled ? 'disabled' : ''),
                    tabIndex: 0,
                    type: "button",
                    "aria-label": "Go to previous page"
                }, /*#__PURE__*/ _react.default.createElement("svg", {
                    className: "dcx-paginationItem-icon",
                    viewBox: "0 0 24 24",
                    focusable: true
                }, /*#__PURE__*/ _react.default.createElement("path", {
                    d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                })))));
                this.state.items.map(function(item, index) {
                    if (item === -1) items.push(/*#__PURE__*/ _react.default.createElement("li", {
                        key: item + index * 100
                    }, /*#__PURE__*/ _react.default.createElement("div", {
                        className: "dcx-paginationItem-ellipse " + (_this.props.disabled ? 'disabled' : '')
                    }, "…")));
                    else items.push(_this.setCurrentPage(item));
                });
                if (!this.props.hideNextButton) items.push(/*#__PURE__*/ _react.default.createElement("li", {
                    key: this.props.count + 1
                }, /*#__PURE__*/ _react.default.createElement("button", {
                    onClick: function() {
                        return _this.setNewItemPosition(1);
                    },
                    className: "dcx-pagination-btn dcx-paginationItem-page " + this.props.size + " " + (this.state.currentPage === this.props.count || this.props.disabled ? 'disabled' : ''),
                    tabIndex: 0,
                    type: "button",
                    "aria-label": "Go to next page"
                }, /*#__PURE__*/ _react.default.createElement("svg", {
                    className: "dcx-paginationItem-icon",
                    viewBox: "0 0 24 24",
                    focusable: true
                }, /*#__PURE__*/ _react.default.createElement("path", {
                    d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                })))));
                return items;
            }
        },
        {
            key: "render",
            value: function render() {
                return(/*#__PURE__*/ _react.default.createElement("nav", {
                    "aria-label": "pagination navigation",
                    className: "dcx-pagination-root"
                }, /*#__PURE__*/ _react.default.createElement("ul", {
                    className: "dcx-pagination-ul"
                }, this.buildPaginationItems())));
            }
        }
    ]);
    return Pagination;
}(_react.default.Component);
exports.default = Pagination;
Pagination.propTypes = {
    currentPage: _propTypes.default.number,
    count: _propTypes.default.number,
    color: _propTypes.default.oneOf([
        'default',
        'primary',
        'danger'
    ]),
    size: _propTypes.default.oneOf([
        'small',
        'large',
        'medium'
    ]),
    hideNextButton: _propTypes.default.bool,
    onChange: _propTypes.default.func
};
Pagination.defaultProps = {
    currentPage: 1,
    count: undefined,
    color: "default",
    size: "medium",
    hideNextButton: false,
    onChange: function onChange(_elt) {}
};
