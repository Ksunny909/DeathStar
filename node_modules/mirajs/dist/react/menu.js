"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _js = require("../js");
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
var Menu = /*#__PURE__*/ function(_Component) {
    "use strict";
    _inherits(Menu, _Component);
    var _super = _createSuper(Menu);
    function Menu(props) {
        _classCallCheck(this, Menu);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "classe", "dc-menu box-elevation");
        _defineProperty(_assertThisInitialized(_this), "openClasse", "" + _this.classe + " other-style menu-open");
        _defineProperty(_assertThisInitialized(_this), "handlerOnItemClick", function(_val) {
            if (_this.props.onItemClick !== undefined) _this.props.onItemClick(_val);
        });
        _defineProperty(_assertThisInitialized(_this), "open", function() {
            _this.positioningMenu();
            _this.setState({
                classes: _this.openClasse
            });
            _this.setState({
                open: true
            });
        });
        _defineProperty(_assertThisInitialized(_this), "close", function() {
            _this.setState({
                classes: _this.classe
            });
            _this.setState({
                open: false
            });
        });
        var open = _js.DCutilities.isDefined(props.open, false);
        _this.state = {
            open: open,
            classes: open ? _this.openClasse : _this.classe
        };
        return _this;
    }
    _createClass(Menu, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                this.positioningMenu();
            }
        },
        {
            key: "positioningMenu",
            value: function positioningMenu() {
                var Menus = _js.DCdom.get('.dc-menu');
                Menus = Menus.length !== undefined ? Menus : [
                    Menus
                ];
                Menus.forEach(function(item) {
                    var parent = item.parentNode;
                    if (parent !== undefined) {
                        _js.DCdom.addClass(item, "display-block");
                        _js.DCdom.css(item, {
                            position: "fixed"
                        });
                        var itemCoords = item.getBoundingClientRect(), coords = parent.getBoundingClientRect(), _body = document.body, clientHeight = _body.clientHeight, clientWidth = _body.clientWidth, diffY = clientHeight - coords.top, diffX = clientWidth - coords.left, newCoords = {
                            x: coords.left - itemCoords.width + coords.width,
                            y: coords.top - itemCoords.height + coords.height
                        };
                        if (diffY < itemCoords.height) {
                            _js.DCdom.css(item, {
                                top: newCoords.y + "px"
                            });
                        } else _js.DCdom.css(item, {
                            top: coords.top + "px"
                        });
                        if (diffX < itemCoords.width) {
                            _js.DCdom.css(item, {
                                left: newCoords.x + "px"
                            });
                        } else _js.DCdom.css(item, {
                            left: coords.left + "px"
                        });
                        _js.DCdom.removeClass(item, "display-block");
                    //console.log(coords, itemCoords, newCoords);
                    }
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                var children = this.props.children, TabElement = children.length !== undefined ? children : [
                    children
                ];
                return(/*#__PURE__*/ _react.default.createElement("div", {
                    className: this.state.classes
                }, TabElement.map(function(element) {
                    if (element !== undefined && element.type === "item") {
                        var _this1 = _this;
                        return(/*#__PURE__*/ _react.default.createElement("div", {
                            className: "dc-menu-item dcx-ripple ripple__primary-color",
                            onClick: function() {
                                return _this1.handlerOnItemClick({
                                    value: element.props.value,
                                    label: element.props.children
                                });
                            }
                        }, element.props.children));
                    }
                })));
            }
        }
    ]);
    return Menu;
}(_react.default.Component);
Menu.propTypes = {
    open: _propTypes.default.bool.isRequired,
    onItemClick: _propTypes.default.func
};
var _default = Menu;
exports.default = _default;
