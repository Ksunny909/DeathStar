"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Autocomplete = exports.Fab = exports.Searcharea = exports.BoutonIcon = exports.Bouton = exports.RadioGroup = exports.CheckBox = exports.Textarea = exports.Select = exports.TextInput = void 0;
var _react = _interopRequireDefault(require("react"));
var _menu = _interopRequireDefault(require("./menu"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _js = require("../js");
var _utilitaires = _interopRequireDefault(require("../js/src/utilitaires"));
var _jsManagement = require("../js/src/components/js_management");
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
/**
 * 1. TextInput
 * 2. Select
 * 3. TextArea
 * 4. CheckBox
 */ var TextInput = function(props) {
    var mode = props.mode, size = props.size, color = props.color, label = props.label, type = props.type, helperText = props.helperText, placeholder = props.placeholder, className = props.className, error = props.error, multiline = props.multiline, areaProps = props.areaProps, inputProps = props.inputProps;
    mode = mode !== undefined ? mode : "filled";
    size = size !== undefined ? size : "medium";
    color = color !== undefined ? color : "default";
    type = type !== undefined ? type : "text";
    className = className !== undefined ? className : "";
    multiline = multiline !== undefined ? multiline : false;
    var areaRows = areaProps !== undefined ? areaProps.rows : 1;
    var textInput = /*#__PURE__*/ _react.default.createRef();
    var containeRef = /*#__PURE__*/ _react.default.createRef();
    var ref5 = _react.default.useState(""), labelClasse = ref5[0], setLabelClasse = ref5[1];
    var ref1 = _react.default.useState(false), eventAdded = ref1[0], setEventAdded = ref1[1];
    var ref2 = _react.default.useState(props.value !== undefined ? props.value : ""), value = ref2[0], setValue = ref2[1];
    var ref3 = _react.default.useState(props.value !== undefined && (props.value + "").trim() !== "" ? "contained" : ""), containClasse = ref3[0], setContainClasse = ref3[1];
    var ref4 = _react.default.useState(""), helperClass = ref4[0], setHelperClass = ref4[1];
    var typesValue = [
        "date",
        "datetime",
        "datetime-local"
    ];
    if (typeof label === 'string' && label.trim() === "") {
        if (props.placeholder !== undefined && props.placeholder.trim() !== "") label = props.placeholder;
    }
    _react.default.useEffect(function() {
        var propsValue = props.value !== undefined ? props.value + "" : "";
        propsValue = propsValue.toString();
        if (propsValue.trim() !== "" || typesValue.indexOf(type.trim()) !== -1 || placeholder !== undefined && placeholder.trim() !== "") setContainClasse("contained");
        else setContainClasse("");
        if (!eventAdded) {
            (0, _jsManagement).OnOutsideClickListener(containeRef.current, function() {
                var ref;
                if ((ref = props.inputProps) == null ? void 0 : ref.disabled) onBlurInput();
            });
            setEventAdded(true);
        }
    });
    var classes = className + ' dc-text-input ';
    switch(mode){
        case 'standard':
            classes += "mode-standard ";
            break;
        case 'outlined':
            classes += "mode-outlined ";
            break;
        default:
            classes += "mode-filled ";
            break;
    }
    switch(size){
        case 'too-small':
        case 'too-sm':
            classes += 'size-too-small ';
            break;
        case 'small':
        case 'sm':
            classes += "size-small ";
            break;
        case 'medium':
            classes += "size-medium ";
            break;
        default:
            classes += "size-medium ";
            break;
    }
    switch(color){
        case 'red':
            classes += "color-red ";
            break;
        case 'green':
            classes += "color-green ";
            break;
        default:
            classes += "color-blue ";
            break;
    }
    var onClickParent = function() {
        console.log(textInput);
        //textInput.current.focus();
        setLabelClasse("focused");
        if (props.onClickParent !== undefined) props.onClickParent();
    };
    var onBlurInput = function() {
        setLabelClasse('');
        handleContainClasse();
        if (props.onBlur !== undefined) props.onBlur();
    };
    var onChangeText = function(e) {
        var val = e.target.value;
        setValue(val);
        if (val.trim() !== "") setContainClasse("contained");
        else setContainClasse("");
        if (props.onChangeText !== undefined) props.onChangeText(val);
        if (props.onValueChange !== undefined) props.onValueChange(val);
    };
    var handleContainClasse = function() {
        var ref;
        if (((ref = props.value) == null ? void 0 : ref.trim()) !== "") setContainClasse("contained");
        else setContainClasse("");
    };
    return(/*#__PURE__*/ _react.default.createElement("div", _extends({
        ref: containeRef
    }, props, {
        className: classes + " " + labelClasse + " " + containClasse + " " + (error ? "error" : ""),
        onClick: function() {
            return onClickParent();
        },
        title: label,
        onBlur: onBlurInput,
        onMouseOver: function() {
            return setHelperClass("display");
        },
        onMouseOut: function() {
            setHelperClass("");
        }
    }), /*#__PURE__*/ _react.default.createElement("label", _extends({}, props.labelProps), label), multiline ? /*#__PURE__*/ _react.default.createElement("textarea", _extends({}, props.inputProps, {
        ref: textInput,
        rows: areaRows,
        placeholder: placeholder,
        onBlur: function() {
            return onBlurInput();
        },
        onKeyUp: function(e) {
            return onChangeText(e);
        },
        onFocus: function() {
            return onClickParent();
        },
        value: props.value /*(props.inputProps !== undefined && props.inputProps.disabled) ? props.value : value*/ ,
        onChange: function(e) {
            return onChangeText(e);
        }
    })) : /*#__PURE__*/ _react.default.createElement("input", _extends({}, props.inputProps, {
        ref: textInput,
        type: type,
        placeholder: placeholder,
        onBlur: function() {
            return onBlurInput();
        },
        onKeyUp: function(e) {
            return onChangeText(e);
        },
        onFocus: function() {
            return onClickParent();
        },
        value: props.value /*(props.inputProps !== undefined && props.inputProps.disabled) ? props.value : value*/ ,
        onChange: function(e) {
            return onChangeText(e);
        }
    })), mode === 'outlined' ? /*#__PURE__*/ _react.default.createElement("fieldset", null, /*#__PURE__*/ _react.default.createElement("legend", null, /*#__PURE__*/ _react.default.createElement("span", null, label))) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null), props.children, helperText !== undefined && helperText !== "" ? /*#__PURE__*/ _react.default.createElement("p", {
        className: "helper-text " + helperClass
    }, helperText) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null)));
};
// defining TextInput Props types
TextInput.propTypes = {
    value: _propTypes.default.string.isRequired,
    mode: _propTypes.default.oneOf([
        "outlined",
        "filled",
        "standard"
    ]),
    size: _propTypes.default.oneOf([
        "too-small",
        "small",
        "medium"
    ]),
    color: _propTypes.default.oneOf([
        "red",
        "green",
        "blue",
        "default"
    ]),
    label: _propTypes.default.string.isRequired,
    type: _propTypes.default.oneOf([
        "date",
        "datetime",
        "text",
        "number",
        "password",
        "email"
    ]).isRequired,
    helperText: _propTypes.default.string,
    className: _propTypes.default.string,
    error: _propTypes.default.bool,
    multiline: _propTypes.default.bool,
    areaProps: _propTypes.default.object,
    inputProps: _propTypes.default.object,
    onValueChange: _propTypes.default.func,
    onChangeText: _propTypes.default.func,
    placeholder: _propTypes.default.string
};
var Select = /*#__PURE__*/ function(_Component) {
    "use strict";
    _inherits(Select, _Component);
    var _super = _createSuper(Select);
    function Select(props) {
        _classCallCheck(this, Select);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "mode", undefined);
        _defineProperty(_assertThisInitialized(_this), "size", undefined);
        _defineProperty(_assertThisInitialized(_this), "color", undefined);
        _defineProperty(_assertThisInitialized(_this), "label", "");
        _defineProperty(_assertThisInitialized(_this), "type", undefined);
        _defineProperty(_assertThisInitialized(_this), "helperText", undefined);
        _defineProperty(_assertThisInitialized(_this), "className", undefined);
        _defineProperty(_assertThisInitialized(_this), "children", undefined);
        _defineProperty(_assertThisInitialized(_this), "textInputClassName", undefined);
        _defineProperty(_assertThisInitialized(_this), "menu", undefined);
        _defineProperty(_assertThisInitialized(_this), "menuRef", /*#__PURE__*/ _react.default.createRef());
        _defineProperty(_assertThisInitialized(_this), "container_ref", /*#__PURE__*/ _react.default.createRef());
        _defineProperty(_assertThisInitialized(_this), "toggleMenu", function(_val) {
            if (_val) {
                if (_this.menuRef.current !== null) _this.menuRef.current.open();
            } else {
                if (_this.menuRef.current !== null) _this.menuRef.current.close();
            }
        });
        _defineProperty(_assertThisInitialized(_this), "handlerClick", function() {
            new _js.FloatMenu(_this.container_ref.current, _this.props.children.map(function(item) {
                return {
                    title: item.props.children,
                    onClick: function() {
                        return _this.handlerOnItemClick({
                            label: item.props.children,
                            value: item.props.value
                        });
                    },
                    icon: ""
                };
            }), true);
        // if (!this.state.open) {
        //     document.addEventListener('click', this.handlerClickOutside, false);
        // } else {
        //     document.removeEventListener('click', this.handlerClickOutside, false);
        // }
        // this.setState({open: !this.state.open});
        // this.toggleMenu(!this.state.open);
        });
        _defineProperty(_assertThisInitialized(_this), "handlerClickOutside", function(e) {
            if (_this.menu !== null && _this.menu.contains(e.target)) {
                return;
            }
            _this.setState({
                open: false
            });
            _this.toggleMenu(false);
        });
        _defineProperty(_assertThisInitialized(_this), "handleOnSelectClick", function() {
            //setOpen(!open);
            if (_this.className.indexOf("disabled") === -1) _this.handlerClick();
        });
        _defineProperty(_assertThisInitialized(_this), "handlerOnItemClick", function(_val) {
            console.log('Value : ', _val);
            _this.setState({
                value: _val.value
            });
            _this.setState({
                labelc: _val.label
            });
            _this.setState({
                open: !_this.state.open
            });
            _this.toggleMenu(!_this.state.open);
            //setTimeout(()=>this.setState({open: !this.state.open}), 250);
            if (_this.props.onValueChange !== undefined) _this.props.onValueChange(_val.value);
        });
        var mode = props.mode, size = props.size, color = props.color, label = props.label, type = props.type, helperText = props.helperText, className = props.className, children = props.children, textInputClassName = props.textInputClassName;
        _this.mode = mode !== undefined ? mode : "filled";
        _this.size = size !== undefined ? size : "medium";
        _this.color = color !== undefined ? color : "default";
        _this.type = type !== undefined ? type : "text";
        _this.className = className !== undefined ? className : "";
        _this.label = label !== undefined ? label : "";
        _this.children = children;
        _this.textInputClassName = textInputClassName !== undefined ? textInputClassName : "";
        _this.handlerClick = _this.handlerClick.bind(_assertThisInitialized(_this));
        _this.handlerClickOutside = _this.handlerClickOutside.bind(_assertThisInitialized(_this));
        _this.state = {
            open: false,
            value: _this.props.value !== undefined ? _this.props.value : "",
            labelc: _this.props.value !== undefined ? _this.props.value : ""
        };
        return _this;
    }
    _createClass(Select, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                var _this = this;
                this.props.children.map(function(element) {
                    if (element.type === "option") {
                        if (element.props.value === _this.state.value) _this.setState({
                            labelc: element.props.children
                        });
                    }
                });
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                return(/*#__PURE__*/ _react.default.createElement("div", {
                    className: "dc-select-input " + this.className,
                    tabIndex: "1",
                    ref: function(node) {
                        _this.menu = node;
                    }
                }, /*#__PURE__*/ _react.default.createElement("div", {
                    ref: this.container_ref
                }, /*#__PURE__*/ _react.default.createElement(TextInput, {
                    className: this.textInputClassName,
                    type: this.type,
                    mode: this.mode,
                    label: this.label,
                    size: this.size,
                    color: this.color,
                    value: this.state.labelc,
                    onClickParent: this.handleOnSelectClick,
                    inputProps: {
                        disabled: true
                    }
                }, /*#__PURE__*/ _react.default.createElement("i", {
                    className: "DGfi-arrow_drop_down dropdown"
                }, "\xa0")))));
            }
        }
    ], [
        {
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(props, state) {
                if (props.value !== state.value) return {
                    value: props.value,
                    labelc: Select.getLabelFromValue(props.value, props)
                };
                return null;
            }
        },
        {
            key: "getLabelFromValue",
            value: /*componentDidUpdate(prevProps, prevState, snapshot) {
        if (prevProps.value !== this.props.value){
            this.setState({value: this.props.value !== undefined ? this.props.value : "",
                labelc: this.props.value !== undefined ? this.props.value : ""})
        }
    }*/ function getLabelFromValue(_value, _props) {
                var val = "";
                _props.children.map(function(element) {
                    if (element.type === "option") {
                        if (element.props.value === _value) val = element.props.children;
                    }
                });
                return val;
            }
        }
    ]);
    return Select;
}(_react.default.Component);
// defining Select propTypes
Select.propTypes = _extends({}, TextInput.propTypes, {
    textInputClassName: _propTypes.default.string
});
var Textarea = function(props) {
    return(/*#__PURE__*/ _react.default.createElement(TextInput, _extends({}, props, {
        multiline: true
    })));
};
Textarea.propTypes = _extends({}, TextInput.propTypes);
var CheckBox = function(props) {
    var svgActive = "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z", svgNotActive = "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z";
    var defChecked = props.checked !== undefined ? props.checked : false;
    var ref = _react.default.useState(defChecked), checked = ref[0], setChecked = ref[1];
    var ref6 = _react.default.useState(checked ? svgActive : svgNotActive), svgClasse = ref6[0], setSvgClasse = ref6[1];
    var ref7 = _react.default.useState(props), prevProps = ref7[0], setPrevProps = ref7[1];
    var classes = 'dc-checkbox hover-bg dcx-ripple';
    if (props.size !== undefined) classes += ' min';
    _react.default.useEffect(function() {
        if (checked) setSvgClasse(svgActive);
        else setSvgClasse(svgNotActive);
    });
    _react.default.useEffect(function() {
        if (props.checked !== prevProps.checked) {
            setChecked(props.checked);
            setPrevProps(props);
        }
    }, [
        props
    ]);
    var handleParentClick = function() {
        setChecked(!checked);
        if (props.onValueChange !== undefined) props.onValueChange(!checked);
    };
    return(/*#__PURE__*/ _react.default.createElement("span", {
        className: classes,
        "aria-disabled": "false",
        onClick: function() {
            return handleParentClick();
        }
    }, /*#__PURE__*/ _react.default.createElement("span", {
        className: "first-span"
    }, /*#__PURE__*/ _react.default.createElement("input", {
        type: "checkbox",
        checked: checked,
        "data-indeterminate": "false",
        "aria-label": "primary checkbox"
    }), /*#__PURE__*/ _react.default.createElement("svg", {
        className: checked ? "checked" : "",
        focusable: "false",
        viewBox: "0 0 24 24",
        "aria-hidden": "true"
    }, /*#__PURE__*/ _react.default.createElement("path", {
        d: svgClasse
    }))), /*#__PURE__*/ _react.default.createElement("span", {
        className: "last-span"
    })));
};
CheckBox.propTypes = {
    checked: _propTypes.default.bool,
    onValueChange: _propTypes.default.func
};
var RadioGroup = /*#__PURE__*/ function(_Component) {
    "use strict";
    _inherits(RadioGroup, _Component);
    var _super = _createSuper(RadioGroup);
    function RadioGroup(props) {
        _classCallCheck(this, RadioGroup);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "classe", "item hover-bg dcx-ripple long-prog");
        _defineProperty(_assertThisInitialized(_this), "activeOption", function(_index) {
            var tab = [];
            _this.state.classes.map(function() {
                return tab.push(_this.classe);
            });
            if (tab[_index] !== undefined) {
                if (tab[_index] === _this.classe) tab[_index] = _this.classe + " active";
                else tab[_index] = _this.classe;
                _this.setState({
                    classes: tab
                });
                if (_this.props.onValueChange !== undefined) _this.props.onValueChange(_this.state.options[_index].props.value);
            }
        });
        var children = props.children, tab1 = [], tabOp = [];
        children.map(function(element) {
            if (element.type === "option") {
                tabOp.push(element);
                tab1.push(_this.classe);
            }
        });
        if (tab1[0] !== undefined) tab1[0] = tab1[0] + " active";
        _this.state = {
            options: tabOp,
            classes: tab1
        };
        return _this;
    }
    _createClass(RadioGroup, [
        {
            key: "render",
            value: function render() {
                var _this = this;
                var name = this.props.name;
                return(/*#__PURE__*/ _react.default.createElement("div", {
                    className: "dc-radio-group"
                }, this.state.options.map(function(element, i) {
                    var _this1 = _this;
                    var _props = element.props, value = _props.value, children = _props.children;
                    return(/*#__PURE__*/ _react.default.createElement("span", {
                        className: _this.state.classes[i],
                        onClick: function() {
                            return _this1.activeOption(i);
                        }
                    }, /*#__PURE__*/ _react.default.createElement("span", {
                        className: "input"
                    }, /*#__PURE__*/ _react.default.createElement("input", {
                        type: "radio",
                        name: name,
                        value: value
                    }), /*#__PURE__*/ _react.default.createElement("span", {
                        className: "radio"
                    })), /*#__PURE__*/ _react.default.createElement("span", {
                        className: "label color-text"
                    }, children)));
                })));
            }
        }
    ]);
    return RadioGroup;
}(_react.default.Component);
RadioGroup.propTypes = {
    name: _propTypes.default.string,
    onValueChange: _propTypes.default.func
};
var Bouton = function(props) {
    var className = props.className, children = props.children, title = props.title;
    return(/*#__PURE__*/ _react.default.createElement("button", _extends({}, props, {
        className: "dcx-btn dcx-ripple " + className
    }), children !== undefined ? children : title));
};
var BoutonIcon = function(props) {
    var className = props.className, children = props.children, iconName = props.iconName, imgUrl = props.imgUrl, iconProps = props.iconProps, title = props.title;
    return(/*#__PURE__*/ _react.default.createElement("button", _extends({}, props, {
        className: "dcx-btn__icon dcx-ripple " + className + " " + (title !== undefined ? "with-title" : "")
    }), iconName !== undefined ? /*#__PURE__*/ _react.default.createElement("i", _extends({}, iconProps, {
        className: iconName
    }), " ") : /*#__PURE__*/ _react.default.createElement("img", _extends({}, iconProps, {
        src: imgUrl,
        alt: ""
    })), title !== undefined ? /*#__PURE__*/ _react.default.createElement("span", {
        className: "title"
    }, title) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null), children !== undefined ? children : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null)));
};
Bouton.propTypes = {
    className: _propTypes.default.string,
    title: _propTypes.default.string
};
BoutonIcon.propTypes = _extends({}, _react.default.Fragment.propTypes, {
    iconName: _propTypes.default.string,
    imgUrl: _propTypes.default.string,
    iconProps: _propTypes.default.object
});
var Fab = function(props) {
    var className = props.className, children = props.children, iconName = props.iconName, imgUrl = props.imgUrl, iconProps = props.iconProps, extended = props.extended;
    extended = _js.DCutilities.isDefined(extended, false);
    return(/*#__PURE__*/ _react.default.createElement("button", _extends({}, props, {
        className: "dcx-fab dcx-ripple " + className + " " + (extended ? "fab__extented" : "")
    }), iconName !== undefined ? /*#__PURE__*/ _react.default.createElement("i", _extends({}, iconProps, {
        className: iconName
    }), " ") : /*#__PURE__*/ _react.default.createElement("img", _extends({}, iconProps, {
        src: imgUrl,
        alt: ""
    })), children !== undefined ? /*#__PURE__*/ _react.default.createElement("div", {
        className: "fab__title"
    }, children) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null)));
};
Fab.propTypes = {
    className: _propTypes.default.string,
    iconName: _propTypes.default.string,
    imgUrl: _propTypes.default.string,
    iconProps: _propTypes.default.object,
    extended: _propTypes.default.bool
};
var Autocomplete = /*#__PURE__*/ function(_Component) {
    "use strict";
    _inherits(Autocomplete, _Component);
    var _super = _createSuper(Autocomplete);
    function Autocomplete(props) {
        _classCallCheck(this, Autocomplete);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "timerId", 0);
        var source = props.source;
        _this.state = {
            suggestions: [],
            tabStr: [],
            value: "",
            lastTimeStamp: 0
        };
        return _this;
    }
    _createClass(Autocomplete, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (this.props.source !== undefined && this.props.source.length !== undefined) {
                    for(var i = 0; i < this.props.source.length; i++)this.state.tabStr.push(this.props.source[i].title);
                }
            }
        },
        {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps, prevState, snapshot) {
                if (prevProps.source !== this.props.source) {
                    for(var i = 0; i < this.props.source.length; i++)this.state.tabStr.push(this.props.source[i].title);
                }
            }
        },
        {
            key: "task",
            value: function task(_value) {
                var tab = [];
                if (this.props.url !== undefined && this.props.url !== "") {
                    var _this3 = this;
                    var urls = this.props.multiUrl ? this.props.url : [
                        this.props.url
                    ];
                    urls.forEach(function(url, index) {
                        var _this2 = _this3;
                        fetch(url + _value).then(function(response) {
                            var _this = _this2;
                            response.json().then(function(jsonResponse) {
                                tab = jsonResponse;
                                if (_this.props.keyData !== undefined) tab = jsonResponse[_this.props.keyData];
                                var results = []; //this.state.suggestions;
                                tab.forEach(function(item) {
                                    item.urlId = index;
                                    results.push(item);
                                });
                                if (_this.state.value.length > 0) _this.setState({
                                    suggestions: results
                                });
                            }).catch(function(error) {
                                console.log("Autocomplete Error wile parsing Json ", error);
                            });
                        }).catch(function(error) {
                            console.log("Autocomplete Error while getting response ", error);
                        });
                    });
                } else {
                    var resIndex = _utilitaires.default.algo.search.string(_value, this.state.tabStr);
                    for(var i = 0; i < resIndex.length; i++)tab.push(this.props.source[resIndex[i]]);
                    this.setState({
                        suggestions: tab
                    });
                }
                return tab;
            }
        },
        {
            key: "autoComplete",
            value: function autoComplete(_value) {
                if (_value.length <= 0) {
                    this.setState({
                        suggestions: []
                    });
                } else {
                    var _this = this;
                    var currentTime = new Date().getTime();
                    if (currentTime - this.state.lastTimeStamp < 300) {
                        if (this.timerId !== 0) clearTimeout(this.timerId);
                    }
                    this.setState({
                        lastTimeStamp: currentTime
                    });
                    this.timerId = setTimeout(function() {
                        _this.setState({
                            suggestions: []
                        });
                        _this.task(_value);
                    }, 100);
                }
                this.setState({
                    value: _value
                });
                if (this.props.onValueChange !== undefined) this.props.onValueChange(_value);
            }
        },
        {
            key: "handlerOnClickItem",
            value: function handlerOnClickItem(_item) {
                if (this.props.onValueChange !== undefined) this.props.onValueChange(_item.title);
                this.setState({
                    suggestions: []
                });
                if (this.props.onSelectItem !== undefined) this.props.onSelectItem(_item);
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                var className = _js.DCutilities.isDefined(this.props.className, "");
                var _props = this.props, listClassName = _props.listClassName, itemClassName = _props.itemClassName;
                itemClassName = _js.DCutilities.isDefined(itemClassName, "");
                listClassName = _js.DCutilities.isDefined(listClassName, "");
                return(/*#__PURE__*/ _react.default.createElement("div", _extends({}, this.props, {
                    className: "dcx-react-auto-suggest-container " + className
                }), /*#__PURE__*/ _react.default.createElement(TextInput, _extends({}, this.props, {
                    onValueChange: function(_value) {
                        _this.autoComplete(_value);
                    },
                    onBlur: function() {
                        var _this5 = _this;
                        setTimeout(function() {
                            return _this5.setState({
                                suggestions: []
                            });
                        }, 300);
                    },
                    onFocus: function() {
                        if (_this.props.url === undefined || _this.props.url === "") {
                            _this.setState({
                                suggestions: _this.props.source
                            });
                        }
                    }
                })), this.state.suggestions.length > 0 ? /*#__PURE__*/ _react.default.createElement("div", {
                    className: "dcx-list dcx-suggestion " + listClassName
                }, this.state.suggestions.map(function(item, i) {
                    /*#__PURE__*/ return _react.default.createElement("div", {
                        className: "dcx-item " + itemClassName,
                        onClick: function() {
                            return _this.handlerOnClickItem(item);
                        },
                        key: i,
                        title: item.title
                    }, item.avatar !== undefined && item.avatar !== "" ? /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__avatar"
                    }, /*#__PURE__*/ _react.default.createElement("img", {
                        src: item.avatar
                    })) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null), /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__title"
                    }, item.title, item.descripiton !== undefined && item.descripiton !== "" ? /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__descript"
                    }, item.descripiton) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null)));
                })) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null)));
            }
        }
    ]);
    return Autocomplete;
}(_react.default.Component);
Autocomplete.propTypes = _extends({}, TextInput.propTypes, {
    source: _propTypes.default.array,
    url: _propTypes.default.string,
    onSelectItem: _propTypes.default.func,
    keyData: _propTypes.default.string,
    multiUrl: _propTypes.default.bool,
    listClassName: _propTypes.default.string,
    itemClassName: _propTypes.default.string
});
var Searcharea = /*#__PURE__*/ function(Autocomplete) {
    "use strict";
    _inherits(Searcharea, Autocomplete);
    var _super = _createSuper(Searcharea);
    function Searcharea(props) {
        _classCallCheck(this, Searcharea);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), /**
     * @type {{icon: string, title: string, ?subtitle: string, handlerClick: function, value: string}[]}
     */ "Menu", []);
        _defineProperty(_assertThisInitialized(_this), "DownMenu", undefined);
        var value = props.value, menu = props.menu, downMenu = props.downMenu;
        _this.Menu = menu;
        _this.DownMenu = downMenu !== undefined ? downMenu : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null);
        _this.state = {
            value: value !== undefined ? value : "",
            menu: "",
            block: "",
            downMenu: "",
            btnClose: "",
            suggestions: [],
            tabStr: [],
            lastTimeStamp: 0
        };
        return _this;
    }
    _createClass(Searcharea, [
        {
            key: "componentDidMount",
            value: function componentDidMount() {
                if (this.props.source !== undefined && this.props.source.length !== undefined) {
                    for(var i = 0; i < this.props.source.length; i++)this.state.tabStr.push(this.props.source[i].title);
                }
            }
        },
        {
            key: "onValueChange",
            value: function onValueChange(e) {
                var val = e.target.value;
                this.setState({
                    value: val
                });
                if (this.props.onValueChange !== undefined) this.props.onValueChange(val);
                if (val !== "") this.setState({
                    btnClose: "active"
                });
                else {
                    this.setState({
                        btnClose: ""
                    });
                }
                this.setState({
                    menu: ""
                });
            }
        },
        {
            key: "onClickInput",
            value: function onClickInput() {
                this.setState({
                    block: "active"
                });
                this.setState({
                    menu: "open"
                });
            }
        },
        {
            key: "onBlurInput",
            value: function onBlurInput() {
                var _this = this;
                this.setState({
                    block: ""
                });
                setTimeout(function() {
                    _this.setState({
                        menu: ""
                    });
                }, 200);
            }
        },
        {
            key: "onClickDownBouton",
            value: function onClickDownBouton() {
                if (this.state.downMenu !== "") this.setState({
                    downMenu: ""
                });
                else this.setState({
                    downMenu: "open"
                });
            }
        },
        {
            key: "onClickCloseBouton",
            value: function onClickCloseBouton() {
                this.setState({
                    value: ""
                });
                this.setState({
                    btnClose: ""
                });
            }
        },
        {
            key: "onClickSearchBouton",
            value: function onClickSearchBouton() {
                if (this.props.onSearch !== undefined) this.props.onSearch(this.state.value);
            }
        },
        {
            key: "render",
            value: function render() {
                var _this = this;
                var _props = this.props, leftBtnSearch = _props.leftBtnSearch, placeHolder = _props.placeHolder, onSearch = _props.onSearch;
                leftBtnSearch = leftBtnSearch !== undefined ? leftBtnSearch : true;
                placeHolder = placeHolder !== undefined ? placeHolder : "Search in App...";
                var _props1 = this.props, listClassName = _props1.listClassName, itemClassName = _props1.itemClassName;
                itemClassName = _js.DCutilities.isDefined(itemClassName, "");
                listClassName = _js.DCutilities.isDefined(listClassName, "");
                return(/*#__PURE__*/ _react.default.createElement("div", _extends({}, this.props, {
                    className: "dcx-searcharea " + this.state.block + " " + this.props.className
                }), /*#__PURE__*/ _react.default.createElement("div", {
                    className: "form"
                }, leftBtnSearch ? /*#__PURE__*/ _react.default.createElement(BoutonIcon, {
                    className: "search",
                    iconName: "DGfi-search2",
                    onClick: function() {
                        return _this.onClickSearchBouton();
                    }
                }) : /*#__PURE__*/ _react.default.createElement(BoutonIcon, {
                    className: "search",
                    iconName: "DGfi-arrow_drop_down",
                    onClick: function() {
                        return _this.onClickDownBouton();
                    }
                }), /*#__PURE__*/ _react.default.createElement("input", {
                    className: "input",
                    type: "text",
                    value: this.state.value,
                    onChange: function(e) {
                        _this.onValueChange(e);
                        _this.autoComplete(e.target.value);
                    },
                    onClick: function() {
                        return _this.onClickInput();
                    },
                    onBlur: function() {
                        var _this6 = _this;
                        _this.onBlurInput();
                        setTimeout(function() {
                            return _this6.setState({
                                suggestions: []
                            });
                        }, 300);
                    },
                    onKeyPress: function(event) {
                        if (event.key === "Enter") {
                            if (onSearch) onSearch();
                        }
                    },
                    placeholder: placeHolder
                }), /*#__PURE__*/ _react.default.createElement(BoutonIcon, {
                    className: "" + this.state.btnClose + " close",
                    iconName: "DGfi-clearclose",
                    onClick: function() {
                        return _this.onClickCloseBouton();
                    }
                }), !leftBtnSearch ? /*#__PURE__*/ _react.default.createElement(BoutonIcon, {
                    className: "down",
                    iconName: "DGfi-search2",
                    onClick: function() {
                        return _this.onClickSearchBouton();
                    }
                }) : /*#__PURE__*/ _react.default.createElement(BoutonIcon, {
                    className: "down",
                    iconName: "DGfi-arrow_drop_down",
                    onClick: function() {
                        return _this.onClickDownBouton();
                    }
                })), /*#__PURE__*/ _react.default.createElement("div", {
                    className: "dcx-list menu " + this.state.menu + " " + listClassName,
                    role: "listbox",
                    "aria-expanded": true
                }, this.Menu.map(function(item, index) {
                    var _this7 = _this;
                    return(/*#__PURE__*/ _react.default.createElement("div", {
                        title: item.title,
                        className: "dcx-item " + itemClassName,
                        onClick: function() {
                            _this7.setState({
                                value: item.value
                            });
                            item.handlerClick(item.value);
                        },
                        key: index
                    }, /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__avatar"
                    }, /*#__PURE__*/ _react.default.createElement("i", {
                        className: item.icon
                    }, " ")), /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__title"
                    }, item.title, item.subtitle ? /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__descript"
                    }, item.subtitle) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null))));
                })), this.state.suggestions.length > 0 ? /*#__PURE__*/ _react.default.createElement("div", {
                    "aria-expanded": true,
                    className: "dcx-list menu open " + listClassName,
                    role: "listbox"
                }, this.state.suggestions.map(function(item, i) {
                    /*#__PURE__*/ return _react.default.createElement("div", {
                        className: "dcx-item " + itemClassName,
                        onClick: function() {
                            _this.handlerOnClickItem(item);
                            _this.setState({
                                value: item.title
                            });
                        },
                        key: i
                    }, item.avatar && item.avatar !== "" ? /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__avatar"
                    }, /*#__PURE__*/ _react.default.createElement("img", {
                        src: item.avatar
                    })) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null), /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__title"
                    }, item.title, item.descripiton && item.descripiton !== "" ? /*#__PURE__*/ _react.default.createElement("span", {
                        className: "dcx-item__descript"
                    }, item.descripiton) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null)));
                })) : /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null), /*#__PURE__*/ _react.default.createElement("div", {
                    className: "down-menu " + this.state.downMenu
                }, this.DownMenu)));
            }
        }
    ]);
    return Searcharea;
}(Autocomplete);
Searcharea.propTypes = {
    value: _propTypes.default.string.isRequired,
    menu: _propTypes.default.object.isRequired,
    downMenu: _propTypes.default.object,
    onSearch: _propTypes.default.func,
    leftBtnSearch: _propTypes.default.bool,
    className: _propTypes.default.string,
    placeHolder: _propTypes.default.string,
    source: _propTypes.default.array,
    url: _propTypes.default.string,
    onSelectItem: _propTypes.default.func,
    keyData: _propTypes.default.string,
    listClassName: _propTypes.default.string,
    itemClassName: _propTypes.default.string
};
exports.TextInput = TextInput;
exports.Select = Select;
exports.Textarea = Textarea;
exports.CheckBox = CheckBox;
exports.RadioGroup = RadioGroup;
exports.Bouton = Bouton;
exports.BoutonIcon = BoutonIcon;
exports.Searcharea = Searcharea;
exports.Fab = Fab;
exports.Autocomplete = Autocomplete;
