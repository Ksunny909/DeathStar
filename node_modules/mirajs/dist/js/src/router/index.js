"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _coding = _interopRequireDefault(require("../coding"));
var _utilitaires = _interopRequireDefault(require("../utilitaires"));
var _scroll = _interopRequireDefault(require("../components/scroll"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * MiraJS Router
 * Manage routes in JavaScript
 * @copyright DcCorp.
 * @author Daniel SAKOU
 * 15/07/2020
 * @type {{navigate: (function(*=): Promise<any>), server: {data: {}, adress: string}, init: Router.init, cookie: (function(): {setLastPage: setLastPage, goToLastPage: goToLastPage}), pile: Array, back: Router.back, push: (function({url: string, adress: number, title: string, main?: Function}): number), pathname: string, routes: Array, backCounter: number, findInStack: (function(*=): number), find: (function(*=): number), user_click: boolean, cleanAppContent: Router.cleanAppContent}}
 */ var Router = {
    /**
     * @type Array({{url: string, adress: number, title: string, main?: function}})
     */ routes: [],
    /**
     * @type Array({{route: {{url: string, adress: number, title: string, main?: function}}, scroll_top: number}})
     */ pile: [],
    server: {
        adress: "",
        data: {}
    },
    user_click: false,
    pathname: "",
    backCounter: 0,
    init: function init(_server, _data) {
        var _this = this;
        this.pathname = window.location.pathname;
        if (_server !== undefined && typeof _server === "string") {
            this.server.adress = _server;
            this.server.data = _data;
            this.server.data.op = -1;
        }
        var VK_BSPACE = 8, VK_F5 = 116;
        var isFromEdit = function(e) {
            if (window.event) e = window.event;
            var target = e.target ? e.target : e.srcElement;
            return target.tagName === "INPUT" && (target.type === "text" || target.type === "password") || target.tagName === "TEXTAREA";
        };
        var blocBadTouche = function(e) {
            if (window.event) e = window.event;
            var touche = window.event ? e.keyCode : e.which;
            var target = e.target ? e.target : e.srcElement;
            if (touche === VK_BSPACE && !isFromEdit(e) || touche === VK_F5) {
                _this.back();
                if (e.keyCode) e.keyCode = 0;
                return false;
            }
            return true;
        };
        document.onkeydown = function(e) {
            blocBadTouche(e);
        };
        _coding.default.event({
            name: "click",
            object: document,
            callback: function() {
                var _this1 = _this;
                _this.user_click = true;
                return setTimeout(function() {
                    _this1.user_click = false;
                }, 1000);
            }
        });
        window.onpopstate = function(e) {
            var _this2 = _this;
            setTimeout(function() {
                if (!_this2.user_click) _this2.back();
                else return false;
            }, 500);
        };
        this.cookie().goToLastPage();
    },
    /**
     * @param _obj{{url: string, adress: number, title: string, main?:function}}
     * @return number
     */ push: function push(_obj) {
        var matches = function() {
            return typeof _obj.url === "string" && typeof _obj.adress === "number" && typeof _obj.title === "string";
        }, ret = -1, app_root = '#dc-app-root';
        if (matches()) {
            _obj.url = _obj.url[0] === "/" ? _obj.url.substr(1, _obj.url.length - 1).toLowerCase() : _obj.url.toLowerCase();
            this.routes.push(_obj);
            _coding.default.append(app_root, '<div id="route-' + _utilitaires.default.toSelector(_obj.url) + '-view" class="width-100 height-100"></div>');
            ret = 0;
        }
        return ret;
    },
    /**
     *
     * @param _url string
     */ navigate: function navigate(_url) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            if (_this.find(_url) !== -1) {
                var route = _this.routes[_this.find(_url)], app_root = '#dc-app-root', progress_page = '#app-page-progress';
                window.history.pushState({}, route.title, window.location.protocol + '//' + window.location.hostname + _this.pathname + route.url);
                _coding.default.setContent('title', route.title);
                if (_this.pile.length > 0) _this.pile[_this.pile.length - 1].scroll_top = _coding.default.get(app_root).scrollTop;
                if (_this.findInStack(route.url) === -1) {
                    var _this3 = _this;
                    _this.server.data.op = route.adress;
                    _coding.default.show(progress_page);
                    _coding.default.ajax({
                        url: _this.server.adress,
                        data: JSON.stringify(_this.server.data),
                        type: "POST",
                        contenType: 'application/json',
                        success: function(_rep) {
                            _coding.default.hide(progress_page);
                            try {
                                var json = JSON.parse(_rep);
                                if (json != null && typeof json.content === "string") {
                                    _this3.cleanAppContent();
                                    _coding.default.show('#route-' + _utilitaires.default.toSelector(route.url) + '-view');
                                    _coding.default.append('#route-' + _utilitaires.default.toSelector(route.url + '-view'), json.content);
                                    _this3.pile.push({
                                        route: route,
                                        scroll_top: 0
                                    });
                                    _this3.backCounter++;
                                    _this3.cookie().setLastPage(route.url);
                                    console.log(route.main);
                                    if (route.main !== undefined) route.main();
                                    resolve({
                                        already: false
                                    });
                                }
                            } catch (e) {
                                reject(e);
                            }
                        }
                    });
                } else {
                    var page = _this.pile[_this.findInStack(route.url)];
                    _this.cleanAppContent();
                    _coding.default.show('#route-' + _coding.default.toSelector(page.route.url) + '-view');
                    (0, _scroll).default({
                        object: app_root,
                        to: page.scroll_top,
                        time: 300
                    });
                    _this.cookie().setLastPage(page.route.url);
                    resolve({
                        already: true
                    });
                }
            }
        });
    },
    /**
     *
     * @param _url string
     * @return number
     */ find: function find(_url) {
        var ret = -1;
        try {
            if (typeof _url === "string") {
                var url = _url[0] === "/" ? _url.substr(1, _url.length - 1).toLowerCase() : _url.toLowerCase();
                for(var i = 0; i < this.routes.length; i++){
                    if (this.routes[i].url === url) {
                        ret = i;
                        break;
                    }
                }
            }
        } catch (e) {
            console.log(e);
        }
        return ret;
    },
    findInStack: function findInStack(_url) {
        var ret = -1;
        try {
            if (typeof _url === "string") {
                var url = _url[0] === "/" ? _url.substr(1, _url.length - 1).toLowerCase() : _url.toLowerCase();
                for(var i = 0; i < this.pile.length; i++){
                    if (this.pile[i].route.url === url) {
                        ret = i;
                        break;
                    }
                }
            }
        } catch (e) {
            console.log(e);
        }
        return ret;
    },
    back: function back() {
        if (this.backCounter > 1) {
            this.backCounter--;
            this.navigate(this.pile[this.backCounter - 1].route.url);
        } else window.history.go(-1);
    },
    cookie: function cookie1() {
        var _this = this;
        return {
            setLastPage: function(_url) {
                _utilitaires.default.cookie.create(_this.pathname, _url, 30);
            },
            goToLastPage: function() {
                var cookie = _utilitaires.default.cookie.read(_this.pathname);
                if (cookie != null) _this.navigate(cookie);
                else _this.navigate(_this.routes[0].url);
            }
        };
    },
    cleanAppContent: function cleanAppContent() {
        for(var i = 0; i < this.routes.length; i++)_coding.default.hide("#route-" + _utilitaires.default.toSelector(this.routes[i].url) + "-view");
    }
};
var _default = Router;
exports.default = _default;
