"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
/*
 * Copyright (c) 16/05/2021 12:00
 * @author Ronald Tchuekou
 * @email ronaldtchuekou@gmail.com
 */ /**
 * Create tooltip function.
 * @param {HTMLElement|string} element
 * @param {Object} options
 * @param {string} options.title Text to display.
 * @param {string} [options.type="grow"] To set the animation type to display tooltip (values : grow|fade|zoom).
 * @param {string} [options.position="default"] To set the position to display tooltip (values :
 * default|top|bottom|left|right).
 * @constructor
 */ var DCTooltip = function(element, options) {
    // Get correct element.
    var target = null;
    if (typeof element === "string") {
        target = document.querySelector(element);
    } else if (typeof element === "object" && element.tagName !== undefined) {
        target = element;
    } else {
        console.error('Type of the element could be HTMLElement or string selector');
        return;
    }
    // Tooltip title.
    var tooltip = document.createElement('span');
    tooltip.className = "dcx-tooltip";
    tooltip.innerText = options.title;
    // Set content.
    document.querySelector('body').appendChild(tooltip);
    // Transition mode.
    // let type = options.type === '' ? 'grow' : options.type;
    // tooltip.classList.add('grow');
    // Manage the position of tooltip.
    target.addEventListener('mouseover', function() {
        // Target rect.
        var targetRect = target.children[0].getBoundingClientRect(), x = targetRect.x, y = targetRect.y, w = targetRect.width, h = targetRect.height;
        tooltip.classList.add('show');
        // Tooltip position.
        // Default position.
        var top = y + h + 5;
        var left = x + w / 2 - tooltip.offsetWidth / 2;
        if (options.position === 'top') {
            setToTop(tooltip, x, y, w);
            return;
        }
        if (options.position === 'bottom') {
            tooltip.style.top = "" + top + "px";
            tooltip.style.left = "" + left + "px";
            return;
        }
        if (options.position === 'left') {
            setToLeft(tooltip, x, y, w, h);
            return;
        }
        if (options.position === 'right') {
            setToRight(tooltip, x, y, w, h);
            return;
        }
        if (left < 0) {
            setToRight(tooltip, x, y, w, h);
        } else if (left + tooltip.offsetWidth + 5 >= window.innerWidth) {
            setToLeft(tooltip, x, y, w, h);
        } else if (top + tooltip.offsetHeight >= window.innerHeight) {
            setToTop(tooltip, x, y, w);
        } else {
            tooltip.style.top = "" + top + "px";
            tooltip.style.left = "" + left + "px";
        }
    });
    target.addEventListener('mouseleave', function() {
        tooltip.classList.remove('show');
    });
};
/**
 * Set tooltip to top position function.
 * @param {HTMLElement} tooltip
 * @param {number} x
 * @param {number} y
 * @param {number} w
 */ var setToTop = function(tooltip, x, y, w) {
    var top = y - 5 - tooltip.offsetHeight;
    var left = x + w / 2 - tooltip.offsetWidth / 2;
    tooltip.style.top = "" + top + "px";
    tooltip.style.left = "" + left + "px";
};
/**
 * Set tooltip to top position function.
 * @param {HTMLElement} tooltip
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 */ var setToLeft = function(tooltip, x, y, w, h) {
    var top = y + h / 2 - tooltip.offsetHeight / 2;
    var left = x - tooltip.offsetWidth - 5;
    tooltip.style.top = "" + top + "px";
    tooltip.style.left = "" + left + "px";
};
/**
 * Set tooltip to top position function.
 * @param {HTMLElement} tooltip
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 */ var setToRight = function(tooltip, x, y, w, h) {
    var top = y + h / 2 - tooltip.offsetHeight / 2;
    var left = x + w + 5;
    tooltip.style.top = "" + top + "px";
    tooltip.style.left = "" + left + "px";
};
var _default = DCTooltip;
exports.default = _default;
