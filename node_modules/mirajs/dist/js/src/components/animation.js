"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _coding = _interopRequireDefault(require("../coding"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * @param _obj {{type: string, object: HTMLElement | string, value: string | number, time: number | string, prev?: string|number}}
 * @returns: object
 */ var Animation = function Animation(_obj) {
    return new Promise(function(resolve, reject) {
        if (typeof _obj === "object" && _obj !== "null") {
            try {
                if (typeof _obj.type === "string" && typeof _obj.object !== "undefined") {
                    var obj = _coding.default.get(_obj.object), r, fonct, __N = parseInt(_obj.time) * 4 / 100, __time = parseInt(_obj.time) / __N;
                    _coding.default.css(obj, {
                        transition: "0s all"
                    });
                    switch(_obj.type){
                        case "height":
                        case "HEIGHT":
                            var height = parseInt(_obj.value), prevHeight = obj.offsetHeight;
                            if (_obj.prev !== undefined) prevHeight = parseFloat(_obj.prev);
                            r = (height - prevHeight) / __N;
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    obj.style.minHeight = prevHeight + _n * r + "px";
                                    obj.style.height = prevHeight + _n * r + "px";
                                    if (height > 0) setTimeout(fonct, __time, _n + 1);
                                    else {
                                        setTimeout(fonct, __time * 0.75, _n + 1);
                                    }
                                } else {
                                    resolve(obj);
                                }
                            };
                            fonct(1);
                            break;
                        case "width":
                        case "WIDTH":
                            var width = parseInt(_obj.value), prevWidth = obj.offsetWidth;
                            if (_obj.prev !== undefined) prevWidth = parseFloat(_obj.prev);
                            r = (width - prevWidth) / __N;
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    obj.style.width = prevWidth + _n * r + "px";
                                    obj.style.minWidth = prevWidth + _n * r + "px";
                                    if (width > 0) setTimeout(fonct, __time, _n + 1);
                                    else setTimeout(fonct, __time * 0.75, _n + 1);
                                } else resolve(obj);
                            };
                            fonct(1);
                            break;
                        case "top":
                        case "TOP":
                            var top = parseInt(_obj.value), prevTop = obj.offsetTop;
                            if (_obj.prev !== undefined) prevTop = parseFloat(_obj.prev);
                            r = (top - prevTop) / __N;
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    _coding.default.css(obj, {
                                        top: prevTop + _n * r + "px"
                                    });
                                    setTimeout(fonct, __time, _n + 1);
                                } else resolve(obj);
                            };
                            fonct(1);
                            break;
                        case "bottom":
                        case "BOTTOM":
                            var bottom = parseInt(_obj.value), prevBottom = window.innerHeight - obj.offsetTop;
                            if (_obj.prev !== undefined) prevBottom = parseFloat(_obj.prev);
                            r = (bottom - prevBottom) / __N;
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    _coding.default.css(obj, {
                                        bottom: prevBottom + _n * r + "px"
                                    });
                                    setTimeout(fonct, __time, _n + 1);
                                } else resolve(obj);
                            };
                            fonct(1);
                            break;
                        case "left":
                        case "LEFT":
                            var left = parseInt(_obj.value), prevLeft = obj.offsetLeft;
                            if (_obj.prev !== undefined) prevLeft = parseFloat(_obj.prev);
                            r = (left - prevLeft) / __N;
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    var cval = prevLeft + _n * r;
                                    _coding.default.css(obj, {
                                        left: cval + "px"
                                    });
                                    setTimeout(fonct, __time, _n + 1);
                                } else resolve(obj);
                            };
                            fonct(1);
                            break;
                        case "right":
                        case "RIGHT":
                            var right = parseInt(_obj.value), prevRight = window.innerWidth - obj.offsetLeft;
                            if (_obj.prev !== undefined) prevRight = parseFloat(_obj.prev);
                            r = (right - prevRight) / __N;
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    _coding.default.css(obj, {
                                        right: prevRight + _n * r + "px"
                                    });
                                    setTimeout(fonct, __time, _n + 1);
                                } else resolve(obj);
                            };
                            fonct(1);
                            break;
                        case "scale":
                        case "SCALE":
                            var prevScale = 0;
                            if (_obj.prev !== undefined) {
                                prevScale = parseFloat(_obj.prev);
                                r = (parseFloat(_obj.value) - prevScale) / __N;
                            }
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    if (_obj.prev === undefined) _coding.default.css(obj, {
                                        transform: "scale(" + _n / __N + ", " + _n / __N + ")"
                                    });
                                    else _coding.default.css(obj, {
                                        transform: "scale(" + (prevScale + _n * r) + ", " + (prevScale + _n * r) + ")"
                                    });
                                    setTimeout(fonct, __time, _n + 1);
                                } else resolve(obj);
                            };
                            fonct(1);
                            break;
                        case "opacity":
                        case "OPACITY":
                            //__N = 50;
                            var prev_op = 0;
                            if (typeof _obj.prev !== "undefined") {
                                prev_op = _obj.prev;
                                r = (parseFloat(_obj.value) - prev_op) / __N;
                            }
                            fonct = function(_n) {
                                if (_n <= __N) {
                                    if (typeof _obj.prev === "undefined") _coding.default.css(obj, {
                                        opacity: _n / __N + ""
                                    });
                                    else {
                                        _coding.default.css(obj, {
                                            opacity: prev_op + _n * r + ""
                                        });
                                    }
                                    setTimeout(fonct, __time, _n + 1);
                                } else resolve(obj);
                            };
                            fonct(1);
                            break;
                    }
                }
            } catch (e) {
                reject(e);
            }
        }
    });
};
var _default = Animation;
exports.default = _default;
