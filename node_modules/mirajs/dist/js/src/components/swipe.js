"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.SwipeY = exports.SwipeX = void 0;
var _coding = _interopRequireDefault(require("../coding"));
var _utilitaires = _interopRequireDefault(require("../utilitaires"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * @method: swipeX()
 * @param _id {HTMLElement|string}
 * @param _callback {function({deplacement: number, initpos: number, finalpos: number})}
 * @param _options {{max: number|string, direction: string, element: HTMLElement|string}}
 * @param _running? {function(number)}
 * @returns: nothing
 */ var SwipeX = function(_id, _callback, _options, _running) {
    /**
     * Cette méthode permet de rendre un élément déplaçable
     */ var __prev_x = 0, __last_x = 0, __mouse_prev_x = 0, __mouse_last_x = 0, __swipe_reading = false;
    try {
        if (_coding.default.get(_id) !== undefined) {
            _coding.default.css(_id, {
                transition: "0s all"
            });
            var swiper_elem = _id;
            if (_options !== undefined && _options.element !== undefined) swiper_elem = _options.element;
            _coding.default.addClass(swiper_elem, 'swipeable');
            if (_utilitaires.default.isTouchScreen()) {
                _coding.default.event({
                    name: "touchstart",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseDown(e);
                    }
                });
                _coding.default.event({
                    name: "touchmove",
                    object: swiper_elem,
                    callback: function(e) {
                        e.preventDefault();
                        elementMouseMove(e);
                    }
                });
                _coding.default.event({
                    name: "click",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseOut(e);
                    }
                });
            } else {
                _coding.default.event({
                    name: "mousedown",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseDown(e);
                    }
                });
                _coding.default.event({
                    name: "mousemove",
                    object: swiper_elem,
                    callback: function(e) {
                        e.preventDefault();
                        elementMouseMove(e);
                    }
                });
                _coding.default.event({
                    name: "click",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseOut(e);
                    }
                });
            }
            var elementMouseDown = function(e) {
                __mouse_last_x = __mouse_prev_x = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX;
                __prev_x = __last_x = _coding.default.get(_id).offsetLeft;
                __swipe_reading = true;
            };
            var elementMouseMove = function(e) {
                if (__swipe_reading) {
                    var current_x = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX, deplacement = current_x - __mouse_last_x, taskable = false;
                    if (_options === undefined || _options.direction === undefined) {
                        taskable = true;
                    } else {
                        if (_options.direction.toLowerCase() === "rtl") {
                            if (deplacement < 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_x - __mouse_prev_x >= -1 * parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            }
                        } else if (_options.direction.toLowerCase() === "ltr") {
                            if (deplacement > 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_x - __mouse_prev_x <= parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            }
                        } else {
                            if (deplacement < 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_x - __mouse_prev_x >= -1 * parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            } else if (deplacement > 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_x - __mouse_prev_x <= parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            }
                        }
                    }
                    if (taskable) {
                        __last_x += deplacement;
                        _coding.default.css(_id, {
                            left: __last_x + "px"
                        });
                        __mouse_last_x = current_x;
                        if (_running !== undefined) _running(deplacement);
                    }
                }
            };
            var elementMouseOut = function() {
                if (__swipe_reading) {
                    __swipe_reading = false;
                    var deplacement = __last_x - __prev_x;
                    if (_callback !== undefined && _callback != null) _callback({
                        deplacement: deplacement,
                        initpos: __prev_x,
                        finalpos: __last_x
                    });
                    __mouse_prev_x = __mouse_last_x = __last_x = 0;
                }
            };
        } else console.log("dc.swipeX: element can't not be undefined");
    } catch (e) {
        console.log(e);
    }
};
/**
 * @method: swipeX()
 * @param _id {HTMLElement|string}
 * @param _callback {function({deplacement: number, initpos: number, finalpos: number})}
 * @param _options {{max: number|string, direction: string, element: HTMLElement|string}}
 * @param _running? {function(string)}
 * @returns: nothing
 */ var SwipeY = function(_id, _callback, _options, _running) {
    /**
     * Cette méthode permet de rendre un élément déplaçable
     */ var __prev_y = 0, __last_y = 0, __mouse_prev_y = 0, __mouse_last_y = 0, __swipe_reading = false;
    try {
        if (_coding.default.get(_id) !== undefined) {
            _coding.default.css(_id, {
                transition: "0s all"
            });
            var swiper_elem = _id;
            if (_options !== undefined && _options.element !== undefined) swiper_elem = _options.element;
            _coding.default.addClass(swiper_elem, 'swipeable');
            if (_utilitaires.default.isTouchScreen()) {
                _coding.default.event({
                    name: "touchstart",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseDown(e);
                    }
                });
                _coding.default.event({
                    name: "touchmove",
                    object: swiper_elem,
                    callback: function(e) {
                        e.preventDefault();
                        elementMouseMove(e);
                    }
                });
                _coding.default.event({
                    name: "touchend",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseOut(e);
                    }
                });
            } else {
                _coding.default.event({
                    name: "mousedown",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseDown(e);
                    }
                });
                _coding.default.event({
                    name: "mousemove",
                    object: swiper_elem,
                    callback: function(e) {
                        e.preventDefault();
                        elementMouseMove(e);
                    }
                });
                _coding.default.event({
                    name: "click",
                    object: swiper_elem,
                    callback: function(e) {
                        elementMouseOut(e);
                    }
                });
            }
            var elementMouseDown = function(e) {
                __mouse_last_y = __mouse_prev_y = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY;
                __prev_y = __last_y = _coding.default.get(_id).offsetTop;
                __swipe_reading = true;
            };
            var elementMouseMove = function(e) {
                if (__swipe_reading) {
                    var current_y = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY, deplacement = current_y - __mouse_last_y, taskable = false;
                    if (_options === undefined || _options.direction === undefined) {
                        taskable = true;
                    } else {
                        if (_options.direction.toLowerCase() === "btt") {
                            if (deplacement < 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_y - __mouse_prev_y >= -1 * parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            }
                        } else if (_options.direction.toLowerCase() === "ttb") {
                            if (deplacement > 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_y - __mouse_prev_y <= parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            }
                        } else {
                            if (deplacement < 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_y - __mouse_prev_y >= -1 * parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            } else if (deplacement > 0) {
                                if (_options.max === undefined) {
                                    taskable = true;
                                } else {
                                    if (current_y - __mouse_prev_y <= parseInt(_options.max)) {
                                        taskable = true;
                                    }
                                }
                            }
                        }
                    }
                    if (taskable) {
                        __last_y += deplacement;
                        _coding.default.css(_id, {
                            top: __last_y + "px"
                        });
                        __mouse_last_y = current_y;
                        if (_running !== undefined) _running(__last_y - __prev_y);
                    }
                }
            };
            var elementMouseOut = function() {
                if (__swipe_reading) {
                    __swipe_reading = false;
                    var deplacement = __last_y - __prev_y;
                    if (_callback !== undefined && _callback != null) _callback({
                        deplacement: deplacement,
                        initpos: __prev_y,
                        finalpos: __last_y
                    });
                    __mouse_prev_y = __mouse_last_y = __last_y = 0;
                }
            };
        } else console.log("dc.swipeY: element can't not be undefined");
    } catch (e) {
        console.log(e);
    }
};
/**
 * @method: swipe()
 * @param: a css selector or a DOM object, a callback function and an object
 * @returns: nothing
 */ var Swipe = function(_id, _callback, _options) {
    SwipeX(_id, _callback, _options);
    SwipeY(_id, _callback, _options);
};
exports.SwipeX = SwipeX;
exports.SwipeY = SwipeY;
var _default = Swipe;
exports.default = _default;
