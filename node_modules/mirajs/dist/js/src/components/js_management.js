"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setDragable = setDragable;
exports.setInitPosition = exports.dateRangeByMonths = exports.OnOutsideClickListener = exports.getRandomInt = exports.generateKey = exports.sortLabel = exports.sortLibelle = exports.FloatMenu = exports.DocumentPreview = exports.ImagePreview = exports.OnScrolling = exports.FloatContent = exports.printFile = exports.mouseOverShowAffter = exports.getContinuePositive = exports.partieEntiere = exports.ShowToast = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _index = require("../../index");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
var FloatMenu = /*#__PURE__*/ function() {
    "use strict";
    function FloatMenu(element, contents, isSelect) {
        if (isSelect === void 0) isSelect = false;
        var _this = this;
        _classCallCheck(this, FloatMenu);
        this.element = element;
        this.contents = contents;
        this.isSelect = isSelect;
        var rect = this.element.getBoundingClientRect();
        var x = rect.x;
        var y = rect.y;
        this.menu = this.createDivWithClass('float__menu');
        this.items = this.contents.map(function(item) {
            return _this.getMenuItem(item);
        });
        this.items.forEach(function(item) {
            return _this.menu.appendChild(item);
        });
        // this.element.parentElement.appendChild(this.menu);
        document.querySelector('body').appendChild(this.menu);
        // Set position of the element.
        this.setPosition(x, y);
        this.init = true;
        window.addEventListener('mouseup', function(e) {
            var items = _this.menu.querySelectorAll('*');
            var any = true, i = 0;
            while(any && i < items.length){
                if (e.target === items[i]) any = false;
                i++;
            }
            _this.removeMenu(!any);
        });
    }
    _createClass(FloatMenu, [
        {
            key: "setPosition",
            value: function setPosition(x, y) {
                if (this.isSelect) this.menu.style.left = "" + x + "px";
                else this.menu.style.left = "" + (x - this.menu.offsetWidth + 24) + "px";
                if (y + this.menu.offsetHeight > window.innerHeight) y = y - this.menu.offsetHeight + 25;
                this.menu.style.top = "" + y + "px";
            }
        },
        {
            key: "removeMenu",
            value: function removeMenu(menu_clicking) {
                if (menu_clicking === void 0) menu_clicking = true;
                var _this = this;
                if (menu_clicking) setTimeout(function() {
                    _this.menu.remove();
                }, 100);
                else this.menu.remove();
                window.removeEventListener('click', this.removeMenu);
            }
        },
        {
            /**
     * @params {{title: string, onClick: function, icon: string}} item
     * @returns {HTMLElement}
     */ key: "getMenuItem",
            value: function getMenuItem(item) {
                var has_icon = item.icon !== undefined && item.icon !== null;
                var menuItem = this.createDivWithClass("float__menu-item " + (has_icon ? 'between' : 'center'));
                menuItem.innerHTML = (has_icon ? "<span class=\"float__menu-item-icon\"><i class=\"" + item.icon + "\"> </i></span>" : '') + "\n        <span class=\"float__menu-item-title\">" + item.title + "</span>";
                menuItem.addEventListener('mousedown', function() {
                    return item.onClick();
                });
                return menuItem;
            }
        },
        {
            /**
     * @params {string} className
     * @returns {HTMLElement}
     */ key: "createDivWithClass",
            value: function createDivWithClass(className) {
                var div = document.createElement('div');
                div.className = className;
                return div;
            }
        }
    ]);
    return FloatMenu;
}();
exports.default = FloatMenu;
var FloatContent = /**
 * Gestion des éléments flottants.
 * @usage <code type="html">
 *          <button id="target">show content</button>
 *          <div id="content">
 *              <input type="text" placeholder="Enter something..."/>
 *          </div>
 *      </code>
 * @usage <code type="javascript">
 *          import FloatContent from 'js_management';
 *          new FloatContent(document.querySelector("#content"), document.querySelector("#target"));
 *     </code>
 */ /*#__PURE__*/ function() {
    "use strict";
    function FloatContent(element_selector, target_selector) {
        var _this = this;
        _classCallCheck(this, FloatContent);
        this.target_selector = target_selector;
        var element = element_selector;
        this.root = this.createDivWithClass('float__content__wrapper');
        this.content = this.createDivWithClass('float__content');
        if (element === null || element === undefined) return;
        this.content.appendChild(element);
        this.root.appendChild(this.content);
        this.target_selector.parentElement.appendChild(this.root);
        this.target_selector.addEventListener('click', function() {
            if (_this.root.classList.contains('show')) _this.hide();
            else _this.show();
        });
        this.root.addEventListener('click', function(e) {
            if (e.target === _this.root) _this.hide();
        });
    }
    _createClass(FloatContent, [
        {
            key: "setPosition",
            value: function setPosition() {
                var target = this.target_selector;
                var x_target = target.getBoundingClientRect().x;
                var y_target = target.getBoundingClientRect().y;
                this.content.style.left = "" + (x_target + target.offsetWidth / 2 - this.content.offsetWidth / 2) + "px";
                if (y_target + this.content.offsetHeight > window.innerHeight) {
                    y_target = y_target - this.content.offsetHeight;
                }
                this.content.style.top = "" + y_target + "px";
            }
        },
        {
            key: "show",
            value: function show() {
                this.root.classList.add('show');
                this.setPosition();
            }
        },
        {
            key: "hide",
            value: function hide() {
                this.root.classList.remove('show');
            }
        },
        {
            /**
     * @params {string} className
     * @returns {HTMLElement}
     */ key: "createDivWithClass",
            value: function createDivWithClass(className) {
                var div = document.createElement('div');
                div.className = className;
                return div;
            }
        }
    ]);
    return FloatContent;
}();
/**
 *
 * @params {HTMLElement} elt
 * @params {any} doThis
 * @constructor
 */ var OnScrolling = function(elt, doThis) {
    elt.addEventListener('scroll', function() {
        doThis(elt.scrollTop);
    }, false);
};
/**
 * Function to listen when clicking outside of the element if the calback is not set, the element will be remove.
 * @param {HTMLElement} elt Element to target.
 * @param {any} [callback=undefined] Function to execute when click outside of element.
 */ var OnOutsideClickListener = function(elt, callback) {
    if (elt === null || elt === undefined) return;
    // console.log("[MiraJs] Count OnOutsideClickListener : ");
    var listener = function(e1) {
        var children = elt.querySelectorAll('*');
        var target = e1.target;
        var is_inside = false;
        var index = 0;
        // console.log("[MiraJs] Target : ", target.outerHTML);
        while(!is_inside && index < children.length){
            var l1 = children[index].outerHTML, l2 = target.outerHTML;
            is_inside = l1.length === l2.length && l1 === l2;
            index++;
        }
        if (!is_inside) {
            if (callback !== undefined) callback();
            else elt.remove();
        }
        window.removeEventListener("mouseup", function(e) {
            return listener(e);
        });
    };
    window.addEventListener('mouseup', function(e) {
        return listener(e);
    });
};
var ShowToast = function(message, duration) {
    if (duration === void 0) duration = 4000;
    (0, _index).DCToast({
        text: message,
        time: duration,
        position: 'center'
    });
};
exports.ShowToast = ShowToast;
var partieEntiere = function(number) {
    var ceil = Math.ceil(number);
    if (number < ceil + 0.6) return ceil;
    return ceil + 1;
};
exports.partieEntiere = partieEntiere;
var getContinuePositive = function(title, message, onAccept) {
    (0, _index).DCAlert({
        type: 'confirm',
        title: title,
        content: message,
        ok: {
            name: 'OK',
            handler: onAccept
        }
    });
};
exports.getContinuePositive = getContinuePositive;
var mouseOverShowAffter = function(elt, delay, callback) {
    var id = -1, timer = 0;
    elt.addEventListener('mouseenter', function() {
        id = setInterval(function() {
            timer += 1;
            if (timer === delay) {
                callback();
                clearInterval(id);
            }
        }, 1000);
        console.log('mouseenter - Interval id', id);
    });
    elt.addEventListener('mouseleave', function() {
        console.log('mouseout - Interval id', id);
        clearInterval(id);
    });
};
exports.mouseOverShowAffter = mouseOverShowAffter;
/**
 *
 * @params {string} src
 * @params {any} onValidate
 * @constructor
 */ var ImagePreview = function(src, onValidate) {
    var preview = document.createElement('div');
    preview.className = 'img';
    var img = document.createElement('img');
    img.src = src;
    img.alt = 'preview image';
    preview.appendChild(img);
    var options = document.createElement('div');
    options.className = 'options';
    var validate = document.createElement('button'), btn = document.createElement('button');
    validate.className = 'btn__submit';
    btn.className = 'btn__close';
    validate.innerHTML = "<i class=\"DGfi-check\"> </i>";
    btn.innerHTML = "<i class=\"DGfi-clearclose\"> </i>";
    options.appendChild(validate);
    options.appendChild(btn);
    var root = document.createElement('div');
    root.className = 'image__preview';
    root.appendChild(preview);
    root.appendChild(options);
    document.querySelector('body').appendChild(root);
    btn.addEventListener('click', function() {
        return root.remove();
    });
    validate.addEventListener('click', function() {
        onValidate();
        root.remove();
    });
};
/**
 * Fonction qui permet d' afficher le contenu d' un document pdf.
 * @params {string} src Chemin d' accès au document.
 * @params {string} name Nom du document.
 * @params {any} onSubmit Lorsqu' on soumet le document.
 * @params {boolean} view Pour connaitre si c'est uniquement pour la visualisation.
 * @constructor
 * @author Ronald Tchuekou.
 */ var DocumentPreview = function(param) {
    var src = param.src, name = param.name, onSubmit = param.onSubmit, view = param.view, viewContent = param.viewContent;
    // Header.
    var btn_submit = document.createElement('button'), btn_close = document.createElement('button'), options = document.createElement('div'), title = document.createElement('div'), viewer_header = document.createElement('div');
    btn_submit.className = 'submit_btn';
    btn_close.className = 'close_btn';
    options.className = 'options';
    title.className = 'title';
    viewer_header.className = 'viewer__header';
    btn_submit.innerHTML = "<i class=\"DGfi-check\"></i>";
    btn_close.innerHTML = "<i class=\"DGfi-clearclose\"></i>";
    title.innerHTML = name;
    if (!view) options.appendChild(btn_submit);
    options.appendChild(btn_close);
    viewer_header.appendChild(title);
    viewer_header.appendChild(options);
    // Content.
    var viewer = document.createElement('div'), viewer_content = document.createElement('div');
    viewer.className = 'webViewer';
    viewer_content.className = 'viewer__content';
    viewer_content.appendChild(viewer);
    debugger;
    viewer.innerHTML = viewContent; // new way
    // Container.
    var root = document.createElement('div');
    root.className = 'pdf__viewer__wrapper';
    root.appendChild(viewer_header);
    root.appendChild(viewer_content);
    // Render the content
    document.querySelector('body').appendChild(root);
    // Events.
    btn_close.addEventListener('click', function() {
        return root.remove();
    });
    btn_submit.addEventListener('click', function() {
        return onSubmit();
    });
// Inject pdf webViewer.
// let loader = new InjectLoader(viewer);
// WebViewer(
//     {
//         path: '/webViewer/lib',
//         initialDoc: src,
//         isAdminUser: true,
//         isReadOnly: false,
//     },
//     viewer
// ).then((instance) => {
//     loader.dismiss();
//     console.log(instance);
// });
};
/**
 * Fonction qui permet de faire le tri des label.
 * @params {array<Object>} [tab=[]]
 * @returns {*}
 */ function sortLabel(tab) {
    var compare = function compare(a, b) {
        if (a.label.toLowerCase() < b.label.toLowerCase()) return -1;
        if (a.label.toLowerCase() > b.label.toLowerCase()) return 1;
        return 0;
    };
    return tab.sort(compare);
}
/**
 * Fonction qui permet de faire le tri des libelles.
 * @params {array<Object>} [tab=[]]
 * @returns {*}
 */ function sortLibelle(tab) {
    var compare = function compare(a, b) {
        if (a.libelle.toLowerCase() < b.libelle.toLowerCase()) return -1;
        if (a.libelle.toLowerCase() > b.libelle.toLowerCase()) return 1;
        return 0;
    };
    return tab.sort(compare);
}
function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}
var generateKey = function() {
    var key = getRandomInt(1, 10000);
    return key + '_' + new Date().getTime();
};
function dateRangeByMonths(startDate, endDate) {
    var start = startDate.split('-');
    var end = endDate.split('-');
    var startYear = parseInt(start[0]);
    var endYear = parseInt(end[0]);
    var dates = [];
    for(var i = startYear; i <= endYear; i++){
        var endMonth = i != endYear ? 11 : parseInt(end[1]) - 1;
        var startMon = i === startYear ? parseInt(start[1]) - 1 : 0;
        for(var j = startMon; j <= endMonth; j = j > 12 ? j % 12 || 11 : j + 1){
            var month = j + 1;
            var displayMonth = month < 10 ? '0' + month : month;
            dates.push([
                i,
                displayMonth,
                '01'
            ].join('-'));
        }
    }
    return dates;
}
var printFile = function(url, data, file_name) {
    var headersList = {
        Accept: '/',
        // 'User-Agent': 'Thunder Client (https://www.thunderclient.io)',
        'Content-Type': 'application/json'
    };
    fetch(url, {
        method: 'POST',
        body: JSON.stringify(data),
        headers: headersList
    }).then(function(response) {
        return response.blob();
    }).then(function(blod) {
        var uri = window.URL.createObjectURL(blod);
        var link = document.createElement('a');
        link.href = uri;
        link.setAttribute('download', file_name);
        document.body.appendChild(link);
        link.click();
        link.remove();
    });
};
exports.printFile = printFile;
/**
 * ok
 * @param {HTMLElement} main
 * @param {HTMLElement} child
 * @param options
 */ function setInitPosition(main, child, options) {
    if (options === void 0) options = {
        width: 400,
        height: 400
    };
    var main_rect = main.getBoundingClientRect();
    var com_top = main_rect.y + options.height + 10;
    var com_bottom = main_rect.y - options.height - 10;
    if (com_top >= window.innerHeight) {
        if (com_bottom <= 0) {
            var d = main_rect.y / 2;
            child.style.top = "" + (main_rect.y - d) + "px";
            child.style.transformOrigin = 'left';
        } else {
            child.style.top = "" + (main_rect.y - options.height + 10) + "px";
            child.style.transformOrigin = 'bottom left';
        }
    } else {
        child.style.top = "" + main_rect.y + "px";
        child.style.transformOrigin = 'top left';
    }
    child.style.left = "" + (main_rect.x + main_rect.width) + "px";
}
function setDragable(elt) {
    elt.addEventListener('mousedown', function(m) {
        m.stopPropagation();
        if (m.which === 1) {
            var xx = m.pageX - elt.offsetLeft, yy = m.pageY - elt.offsetTop;
            /**
             * @param {MouseEvent} e
             */ var move = function(e) {
                e.stopPropagation();
                var x = e.pageX, y = e.pageY;
                elt.style.left = x - xx + 'px';
                elt.style.top = y - yy + 'px';
            };
            window.addEventListener('mousemove', move);
            elt.addEventListener('mouseup', function() {
                window.removeEventListener('mousemove', move);
            });
        }
    });
}
exports.FloatContent = FloatContent;
exports.OnScrolling = OnScrolling;
exports.ImagePreview = ImagePreview;
exports.DocumentPreview = DocumentPreview;
exports.FloatMenu = FloatMenu;
exports.sortLibelle = sortLibelle;
exports.sortLabel = sortLabel;
exports.generateKey = generateKey;
exports.getRandomInt = getRandomInt;
exports.OnOutsideClickListener = OnOutsideClickListener;
exports.dateRangeByMonths = dateRangeByMonths;
exports.setInitPosition = setInitPosition;
