"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = exports.Sidemenu2 = exports.Sidemenu = void 0;
var _coding = _interopRequireDefault(require("../coding"));
var _animation = _interopRequireDefault(require("./animation"));
var _utilitaires = _interopRequireDefault(require("../utilitaires"));
var _fade = _interopRequireDefault(require("./fade"));
var _swipe = require("./swipe");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * @param _selector {HTMLElement|string}
 * @param _options {{width: string|number, time: string|number}}
 * @return {{toggle: function, close: function, open: function}}
 * @constructor
 */ var Sidemenu = function(_selector, _options) {
    var ret = {
        toggle: function() {
            return console.log("Toggle sidemenu...");
        },
        open: function() {
            return console.log("Open sidemenu...");
        },
        close: function() {
            return console.log("Close sidemenu...");
        }
    };
    try {
        var sidemenu = _coding.default.get(_selector), parent = sidemenu.parentNode, __time_slide = 200, __start_reading = false, __prev_x = 0, __diff_x = 0, __sidemenu_is_displayed = false, __left = parent.offsetWidth * 9 / 10, __selector_sidemenu = _selector, __counter = 0, __speed_move = 10, __last_x = 0, __last_y = 0, __prev_y = 0, __y_speed = 50, __width = 250;
        if (__left > __width) __left = __width;
        if (_options !== undefined && _options.width !== undefined) __left = __width = parseInt(_options.width);
        if (_options !== undefined && _options.time !== undefined) __time_slide = parseInt(_options.time);
        _coding.default.css(sidemenu, {
            left: -1 * __left + "px",
            width: __width + 'px'
        });
        var div_fade = _coding.default.new("div");
        div_fade.innerHTML = '<div class="dcx-fade dcx-fade-side"></div>';
        parent.appendChild(div_fade);
        var fade = parent.querySelector(".dcx-fade-side");
        _coding.default.css(fade, {
            opacity: "0",
            display: "none"
        });
        var worker = function() {
            if (!_utilitaires.default.isTouchScreen()) {
                parent.addEventListener('mousedown', function(e) {
                    mouseDownParent(e);
                });
                parent.addEventListener('mousemove', function(e) {
                    mouseMoveParent(e);
                });
                parent.addEventListener('mouseup', function(e) {
                    clickParent(e);
                });
            } else {
                parent.addEventListener('touchstart', function(e) {
                    mouseDownParent(e);
                });
                parent.addEventListener('touchmove', function(e) {
                    mouseMoveParent(e);
                });
                parent.addEventListener('touchend', function(e) {
                    clickParent(e);
                });
            }
        };
        var mouseDownParent = function(e) {
            //console.log(e.currentTarget);
            try {
                __prev_x = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX;
                __prev_y = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY;
                if (__prev_x < 15) __start_reading = true;
            } catch (e1) {}
        };
        var mouseMoveParent = function(e) {
            try {
                var x = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX, elem = e.currentTarget.querySelector(__selector_sidemenu);
                if (__prev_x < x && x <= __left && __start_reading) {
                    __counter++;
                    __last_x = x;
                    __last_y = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY;
                    var diff = __diff_x = x - __prev_x, left = diff - __left;
                    if (diff < 0) left = __left + diff;
                    //console.log(left + "px");
                    _coding.default.show(elem);
                    if (diff < __left && Math.abs(__last_y - __prev_y) < __y_speed) {
                        _coding.default.css(elem, {
                            left: left + "px"
                        });
                    }
                }
                (0, _swipe).SwipeX(elem, function(_obj) {
                    var dep = Math.abs(_obj.deplacement);
                    if (dep > __left / 4) sliderS(elem, 0);
                    else if (0 < dep && dep <= __left / 4) sliderS(elem, 1);
                }, {
                    direction: "rtl",
                    max: __left
                });
            } catch (e2) {}
        };
        var clickParent = function(e) {
            //console.log(e);
            try {
                var x = __last_x, elem = e.currentTarget.querySelector(__selector_sidemenu);
                //alert(x);
                if (__start_reading && Math.abs(__last_y - __prev_y) < __y_speed) {
                    if (x - __prev_x < __left / 4 && __counter < __speed_move) sliderS(elem, 0);
                    else sliderS(elem, 1);
                }
                __counter = 0;
                __start_reading = false;
            } catch (e3) {
                console.log(e3);
            }
        };
        var sliderS = function(_elem, _op) {
            if (_op > 0) {
                console.log("Navbar showing...");
                (0, _animation).default({
                    type: "left",
                    object: _elem,
                    value: 0,
                    time: __time_slide
                });
                _fade.default.In(fade);
                __sidemenu_is_displayed = true;
            } else {
                console.log("Navbar Hidding...");
                (0, _animation).default({
                    type: "left",
                    object: _elem,
                    value: -1 * __left,
                    time: __time_slide
                });
                _fade.default.out(fade);
                __sidemenu_is_displayed = false;
            }
        };
        var toggle = function() {
            if (__sidemenu_is_displayed) sliderS(document.querySelector(__selector_sidemenu), 0);
            else sliderS(document.querySelector(__selector_sidemenu), 1);
        };
        try {
            var btns = document.querySelectorAll('.dc-sidemenu-toggle');
            for(var i = 0; i < btns.length; i++)btns[i].addEventListener("click", toggle, false);
            fade.onclick = function(e) {
                try {
                    var x = e.clientX;
                    //console.log(e);
                    if (x > __left) sliderS(document.querySelector(__selector_sidemenu), 0);
                } catch (e4) {
                    console.log(e4);
                }
            };
            worker();
        } catch (e) {
            console.log(e);
        }
        ret = {
            toggle: toggle,
            open: function() {
                if (!__sidemenu_is_displayed) sliderS(document.querySelector(__selector_sidemenu), 1);
            },
            close: function() {
                if (__sidemenu_is_displayed) sliderS(document.querySelector(__selector_sidemenu), 0);
            }
        };
    } catch (e) {
        console.log(e);
    }
    return ret;
};
/**
 * @param _selector {HTMLElement|string}
 * @param _options {{width: string | number, time: string | number}}
 * @returns: nothing
 */ var Sidemenu2 = function(_selector, _options) {
    try {
        var sidemenu = _coding.default.get(_selector), parent = sidemenu.parentNode, __time_slide = 200, __start_reading = false, __start_reading_sidemenu = false, __prev_x = 0, __diff_x = 0, __sidemenu_is_displayed = false, __article = ".dc-article", __left = _coding.default.get(_selector).offsetWidth, __prev_x_sidemenu = 0, __diff_x_sidemenu = 0, __selector_sidemenu = _selector, __counter = 0, __counter_sidemnu = 0, __speed_move = 10, __last_x = 0, __last_x_sidemenu = 0, __last_y = 0, __prev_y = 0, __prev_y_sidemenu = 0, __last_y_sidemenu = 0, __y_speed = 50, __width = 250;
        if (__left > __width) __left = __width;
        if (_options !== undefined && _options.width !== undefined) __left = __width = parseInt(_options.width);
        _coding.default.css(sidemenu, {
            left: -1 * __left + "px",
            width: __width + 'px'
        });
        _coding.default.css(__article, {
            left: -1 * __left + "px"
        });
        var worker = function() {
            if (!_utilitaires.default.isTouchScreen()) {
                parent.addEventListener('mousedown', function(e) {
                    mouseDownParent(e);
                });
                parent.addEventListener('mousemove', function(e) {
                    mouseMoveParent(e);
                });
                parent.addEventListener('mouseup', function(e) {
                    clickParent(e);
                });
            } else {
                parent.addEventListener('touchstart', function(e) {
                    mouseDownParent(e);
                });
                parent.addEventListener('touchmove', function(e) {
                    mouseMoveParent(e);
                });
                parent.addEventListener('touchend', function(e) {
                    clickParent(e);
                });
            }
        };
        var mouseDownParent = function(e) {
            try {
                __prev_x = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX;
                __prev_y = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY;
                if (__prev_x < 15) __start_reading = true;
            } catch (e5) {}
        };
        var mouseMoveParent = function(e) {
            try {
                var x = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX, elem = e.currentTarget.querySelector(__selector_sidemenu);
                if (__prev_x < x && x <= __left && __start_reading) {
                    __counter++;
                    __last_x = x;
                    __last_y = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY;
                    var diff = __diff_x = x - __prev_x, left = diff - __left;
                    if (diff < 0) left = __left + diff;
                    if (diff < __left && Math.abs(__last_y - __prev_y) < __y_speed) {
                        _coding.default.css(elem, {
                            left: left + "px"
                        });
                        _coding.default.css(__article, {
                            left: left + "px"
                        });
                    }
                }
                if (!_utilitaires.default.isTouchScreen()) {
                    elem.addEventListener('mousedown', function(_e) {
                        mouseDownElem(_e);
                    });
                    elem.addEventListener('mousemove', function(_e) {
                        mouseMoveElem(_e);
                    });
                    elem.addEventListener('click', function(_e) {
                        clickElem(_e);
                    });
                } else {
                    elem.addEventListener('touchstart', function(_e) {
                        mouseDownElem(_e);
                    });
                    elem.addEventListener('touchmove', function(_e) {
                        mouseMoveElem(_e);
                    });
                    elem.addEventListener('touchend', function(_e) {
                        clickElem(_e);
                    }, false);
                }
            } catch (e6) {}
        };
        var clickParent = function(e) {
            try {
                var x = __last_x, elem = e.currentTarget.querySelector(__selector_sidemenu);
                if (__start_reading && Math.abs(__last_y - __prev_y) < __y_speed) {
                    if (x - __prev_x < __left / 4 && __counter < __speed_move) sliderS(elem, 0);
                    else sliderS(elem, 1);
                }
                __counter = 0;
                __start_reading = false;
            } catch (e7) {
                console.log(e7);
            }
        };
        var mouseDownElem = function(e) {
            try {
                __prev_x_sidemenu = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX;
                __prev_y_sidemenu = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY;
                if (__prev_x_sidemenu < __left && __sidemenu_is_displayed) __start_reading_sidemenu = true;
            } catch (e8) {}
        };
        var mouseMoveElem = function(e) {
            try {
                var x = _utilitaires.default.isTouchScreen() ? e.touches[0].clientX : e.clientX, elem = e.currentTarget;
                if (x < __prev_x_sidemenu && __prev_x_sidemenu < __left && __start_reading_sidemenu) {
                    __counter_sidemnu++;
                    __last_x_sidemenu = x;
                    __last_y_sidemenu = _utilitaires.default.isTouchScreen() ? e.touches[0].clientY : e.clientY;
                    var diff = __diff_x_sidemenu = __prev_x_sidemenu - x, left = diff - __left;
                    __diff_x_sidemenu = -1 * left;
                    if (diff < 0) left = __left + diff;
                    left = -1 * diff;
                    if (diff < __left && Math.abs(__last_y_sidemenu - __prev_y_sidemenu) < __y_speed) {
                        _coding.default.css(elem, {
                            left: left + "px"
                        });
                        _coding.default.css(__article, {
                            left: left + "px"
                        });
                    }
                }
            } catch (e9) {}
        };
        var clickElem = function(e) {
            //alert(e);
            try {
                var elem = e.currentTarget;
                if (__start_reading_sidemenu && Math.abs(__last_y_sidemenu - __prev_y_sidemenu) < __y_speed) {
                    if (__prev_x_sidemenu - __last_x_sidemenu > __left / 4 && __counter_sidemnu >= __speed_move) sliderS(elem, 0);
                    else sliderS(elem, 1);
                    __counter_sidemnu = 0;
                }
                __start_reading_sidemenu = false;
            } catch (e10) {}
        };
        var sliderS = function(_elem, _op) {
            if (_op > 0) {
                console.log("showing...");
                (0, _animation).default({
                    type: "left",
                    object: _elem,
                    value: 0,
                    time: __time_slide
                });
                (0, _animation).default({
                    type: "left",
                    object: __article,
                    value: 0,
                    time: __time_slide
                });
                __sidemenu_is_displayed = true;
            } else {
                console.log("Hidding...");
                (0, _animation).default({
                    type: "left",
                    object: _elem,
                    value: -1 * __left,
                    time: __time_slide
                });
                (0, _animation).default({
                    type: "left",
                    object: __article,
                    value: -1 * __left,
                    time: __time_slide
                });
                __sidemenu_is_displayed = false;
            }
        };
        var toggle = function() {
            if (__sidemenu_is_displayed) sliderS(document.querySelector(__selector_sidemenu), 0);
            else sliderS(document.querySelector(__selector_sidemenu), 1);
        };
        try {
            var btns = document.querySelectorAll('.dc-sidemenu-toggle');
            for(var i = 0; i < btns.length; i++)btns[i].addEventListener("click", toggle, false);
            worker();
        } catch (e) {
            console.log(e);
        }
    } catch (e) {
        console.log(e);
    }
};
exports.Sidemenu = Sidemenu;
exports.Sidemenu2 = Sidemenu2;
var _default = Sidemenu;
exports.default = _default;
