"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var DrawerContent = /*#__PURE__*/ function() {
    "use strict";
    function DrawerContent(element) {
        _classCallCheck(this, DrawerContent);
        this.element = element;
        this.currentItem = 0;
        if (element === undefined) {
            console.error("Indiquer un \xe9l\xe9ment du document pour le carousel.", element);
            return;
        }
        var children = [].slice.call(element.children); // Récupération des enfants au moment de l' execution du script.
        // Manipulation du dom.
        this.domManagement(children);
        this.setStyles();
    }
    _createClass(DrawerContent, [
        {
            /**
     * Appliquer les bonnes dimensions au items du carousel.
     */ key: "setStyles",
            value: function setStyles() {
                var ratio = this.items.length;
                this.container.style.width = ratio * 100 + "%";
                this.items.forEach(function(item) {
                    return item.style.width = 100 / ratio + '%';
                });
            }
        },
        {
            /**
     * Partir à l' item suivant.
     */ key: "next",
            value: function next() {
                var position = this.currentItem + 1;
                if (position >= this.items.length) return;
                this.gotToItem(position);
            }
        },
        {
            /**
     * Revenir à l' item précédant.
     */ key: "previous",
            value: function previous() {
                var position = this.currentItem - 1;
                if (position < 0) return;
                this.gotToItem(position);
            }
        },
        {
            /**
     * Déplacer l' item courant vers l' item ciblé.
     * @param {number} index
     */ key: "gotToItem",
            value: function gotToItem(index) {
                var translateX = index * -100 / this.items.length;
                this.container.style.transform = "translate3d(" + translateX + "%, 0, 0)";
                this.container.offsetHeight; // Forcé le repaint, pour annuler les animations.
                this.currentItem = index;
            }
        },
        {
            /**
     * @param {String} className
     * @returns {HTMLElement}
     */ key: "createDivWithClass",
            value: function createDivWithClass(className) {
                var div = document.createElement('div');
                div.setAttribute('class', className);
                return div;
            }
        },
        {
            /**
     * Gestion du document.
     */ key: "domManagement",
            value: function domManagement(children) {
                var _this = this;
                this.root = this.createDivWithClass('drawer_content');
                this.container = this.createDivWithClass('drawer');
                this.root.appendChild(this.container);
                this.element.appendChild(this.root);
                this.items = children.map(function(child) {
                    var item = _this.createDivWithClass('drawer__item');
                    item.appendChild(child);
                    return item;
                });
                this.items.forEach(function(item) {
                    return _this.container.appendChild(item);
                });
            }
        }
    ]);
    return DrawerContent;
}();
exports.default = DrawerContent;
