"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _coding = _interopRequireDefault(require("../../coding"));
var _popup = _interopRequireDefault(require("./popup"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Popup = function() {
    return {
        destroy: function destroy() {
            this.pop = null;
        },
        pop: null,
        /**
         * @function: create()
         * @param _obj {{type: string, container: HTMLElement|string, time: string|number, ?dimensions: object, ?starter: string, ?options: {fade: boolean, defaultBtn: boolean, cancelable: boolean}}}
         */ create: function create(_obj) {
            var matches = function() {
                return _obj.type !== undefined && _obj.container !== undefined && _obj.time !== undefined;
            };
            if (matches()) {
                this.destroy();
                this.pop = new _popup.default(_obj.container);
                _coding.default.css(_obj.container, {
                    transition: "0s all"
                });
                switch(_obj.type.toLowerCase().trim()){
                    case "mobile":
                        if (_obj.dimensions !== undefined && typeof _obj.dimensions.width === "number" && typeof _obj.dimensions.height === "number") {
                            if (_obj.options === undefined) this.pop.initM(parseInt(_obj.time), parseInt(_obj.dimensions.width), parseInt(_obj.dimensions.height));
                            else this.pop.initM(parseInt(_obj.time), parseInt(_obj.dimensions.width), parseInt(_obj.dimensions.height), _obj.options);
                            if (_obj.starter !== undefined) {
                                var _this = this;
                                _coding.default.event({
                                    name: "click",
                                    object: _obj.starter,
                                    callback: function() {
                                        _this.show();
                                    }
                                });
                            }
                        }
                        break;
                    case "other":
                        if (_obj.starter !== undefined) {
                            var _this1 = this;
                            _coding.default.event({
                                name: "click",
                                object: _obj.starter,
                                callback: function(e) {
                                    var width = 0, height = 0, elem, coords = _coding.default.getCoords(e.currentTarget);
                                    if (e.currentTarget.firstChild != null) elem = e.currentTarget.firstChild.offsetWidth != null || e.currentTarget.firstChild.offsetWith !== undefined ? e.currentTarget.firstChild : e.currentTarget;
                                    else elem = e.currentTarget;
                                    if (_obj.dimensions !== undefined && typeof _obj.dimensions.width === "number" && typeof _obj.dimensions.height === "number") {
                                        width = parseInt(_obj.dimensions.width) <= window.innerWidth ? parseInt(_obj.dimensions.width) : window.innerWidth;
                                        height = parseInt(_obj.dimensions.height) <= window.innerHeight ? parseInt(_obj.dimensions.height) : window.innerHeight;
                                    } else {
                                        width = window.innerWidth;
                                        height = window.innerHeight;
                                    }
                                    if (_obj.options === undefined) _this1.pop.initDC(parseInt(_obj.time), width, height, coords.x, coords.y, elem.offsetWidth, elem.offsetHeight);
                                    else _this1.pop.initDC(parseInt(_obj.time), width, height, coords.x, coords.y, elem.offsetWidth, elem.offsetHeight, _obj.options);
                                }
                            });
                        } else console.log("dc-popup: Error provide a starter element for other popup");
                        break;
                    case "improved":
                        if (_obj.starter !== undefined) {
                            var _this2 = this;
                            _coding.default.event({
                                name: "click",
                                object: _obj.starter,
                                callback: function(e) {
                                    var elem, coords = _coding.default.getCoords(e.currentTarget);
                                    if (e.currentTarget.firstChild != null) elem = e.currentTarget.firstChild.offsetWidth != null || e.currentTarget.firstChild.offsetWidth !== undefined ? e.currentTarget.firstChild : e.currentTarget;
                                    else elem = e.currentTarget;
                                    var width = 0, height = 0, scaleX, scaleY;
                                    if (_obj.dimensions !== undefined && typeof _obj.dimensions.width === "number" && typeof _obj.dimensions.height === "number") {
                                        width = parseInt(_obj.dimensions.width) <= window.innerWidth ? parseInt(_obj.dimensions.width) : window.innerWidth;
                                        height = parseInt(_obj.dimensions.height) <= window.innerHeight ? parseInt(_obj.dimensions.height) : window.innerHeight;
                                    } else {
                                        width = window.innerWidth;
                                        height = window.innerHeight;
                                    }
                                    scaleX = width / elem.offsetWidth;
                                    scaleY = height / elem.offsetHeight;
                                    if (_obj.options !== undefined) _this2.pop.initZ(parseInt(_obj.time), coords.x, coords.y, elem.offsetWidth, elem.offsetHeight, scaleX, scaleY, _obj.options);
                                    else _this2.pop.initZ(parseInt(_obj.time), coords.x, coords.y, elem.offsetWidth, elem.offsetHeight, scaleX, scaleY);
                                }
                            });
                        } else console.log("dc-popup: Error provide a starter element for improved popup");
                        break;
                    default:
                    case "basic":
                        if (_obj.dimensions !== undefined && typeof _obj.dimensions.width === "number" && typeof _obj.dimensions.height === "number") {
                            if (_obj.options === undefined) this.pop.init(parseInt(_obj.time), parseInt(_obj.dimensions.width), parseInt(_obj.dimensions.height));
                            else this.pop.init(parseInt(_obj.time), parseInt(_obj.dimensions.width), parseInt(_obj.dimensions.height), _obj.options);
                            if (_obj.starter !== undefined) {
                                var _this3 = this;
                                _coding.default.event({
                                    name: "click",
                                    object: _obj.starter,
                                    callback: function() {
                                        _this3.show();
                                    }
                                });
                            }
                        }
                        break;
                }
            }
            return this;
        },
        show: function show() {
            var _this = this;
            switch(this.pop.type){
                case "mobile":
                    this.pop.mobileShow();
                    break;
                case "other":
                    this.pop.showDC();
                    break;
                case "improved":
                    this.pop.showZ();
                    break;
                default:
                case "basic":
                    this.pop.show();
                    break;
            }
            setTimeout(function() {
                _coding.default.get(_this.pop._Element).style.transform = "";
            }, this.pop.dure + 110);
        },
        dismiss: function dismiss() {
            switch(this.pop.type){
                case "mobile":
                    this.pop.dismissMobile();
                    break;
                case "other":
                    this.pop.dismissDC();
                    break;
                case "improved":
                    this.pop.dismissZ();
                    break;
                default:
                case "basic":
                    this.pop.dismiss();
                    break;
            }
        }
    };
};
var _default = Popup;
exports.default = _default;
