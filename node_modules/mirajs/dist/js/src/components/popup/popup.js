"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _coding = _interopRequireDefault(require("../../coding"));
var _utilitaires = _interopRequireDefault(require("../../utilitaires"));
var _animation = _interopRequireDefault(require("../animation"));
var _fade = _interopRequireDefault(require("../fade"));
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/*if (typeof window !== 'object') {
    global.window = global;
    global.window.navigator = {};
}*/ var btnClose = '<button class="dcx-btn__icon btn__close dcx-popup__btn_close dcx-ripple"><i class="DGfi-clearclose"></i></button>', fadeBox = '<div class="dcx-fade"></div>', log_name = 'POPUP LOG : ', fadeBoxClass = ".dcx-fade", btnCloseClass = '.dcx-popup__btn_close';
var Popup = /*#__PURE__*/ function() {
    "use strict";
    function Popup(_elem) {
        _classCallCheck(this, Popup);
        _defineProperty(this, "elem", "");
        _defineProperty(this, "Wo", 300);
        _defineProperty(this, "Ho", 200);
        _defineProperty(this, "Xo", (window.innerWidth - this.Wo) / 2);
        _defineProperty(this, "Yo", (window.innerHeight - this.Ho) / 2);
        _defineProperty(this, "dure", 0);
        _defineProperty(this, "period", 0);
        _defineProperty(this, "nbTour", 20);
        _defineProperty(this, "n", 0);
        _defineProperty(this, "_Element", "");
        _defineProperty(this, "Wmax", 600);
        _defineProperty(this, "Hmax", 350);
        _defineProperty(this, "scaleX", 0);
        _defineProperty(this, "scaleY", 0);
        _defineProperty(this, "dismissed", false);
        _defineProperty(this, "options", {
            fade: true,
            defaultBtn: true,
            cancelable: true
        });
        _defineProperty(this, "type", "basic");
        this._Element = this.elem = _elem;
    }
    _createClass(Popup, [
        {
            key: "setOptions",
            value: function setOptions(_options) {
                if (_options !== undefined) {
                    if (_options.fade !== undefined) this.options.fade = _options.fade;
                    if (_options.defaultBtn !== undefined) this.options.defaultBtn = _options.defaultBtn;
                    if (_options.cancelable !== undefined) this.options.cancelable = _options.cancelable;
                }
            }
        },
        {
            key: "setPosition",
            value: function setPosition() {
                this.Wmax = this.Wmax > window.innerWidth ? window.innerWidth : this.Wmax;
                this.Hmax = this.Hmax > window.innerHeight ? window.innerHeight : this.Hmax;
                _coding.default.css(this._Element, {
                    width: this.Wmax + "px",
                    height: this.Hmax + "px",
                    left: _utilitaires.default.centerLeft(this.Wmax) + "px",
                    top: _utilitaires.default.centerTop(this.Hmax) + "px"
                });
            }
        },
        {
            key: "setScrolling",
            value: function setScrolling() {
                var pBody = _coding.default.get(this._Element).querySelector(".dcx-popup__content"), pHeader = _coding.default.get(this._Element).querySelector(".dcx-popup__header"), pFooter = _coding.default.get(this._Element).querySelector(".dcx-popup__footer");
                pBody.addEventListener("scroll", function(e) {
                    if (pBody.scrollTop > 0) {
                        _coding.default.removeClass(pHeader, "header__scrolling");
                        _coding.default.addClass(pHeader, "header__scrolling");
                    } else _coding.default.removeClass(pHeader, "header__scrolling");
                    if (pBody.scrollTop < pBody.scrollHeight) {
                        _coding.default.removeClass(pFooter, "footer__scrolling");
                        _coding.default.addClass(pFooter, "footer__scrolling");
                    } else _coding.default.removeClass(pFooter, "footer__scrolling");
                }, false);
            }
        },
        {
            key: "init",
            value: function init(duration, width, height, _options) {
                var _this = this;
                if (this.elem !== "") this._Element = this.elem; // container html of popup
                else alert("Error : element must not be null");
                if (_utilitaires.default.isNumeric(duration)) this.dure = parseFloat(duration);
                else this.dure = 0.75; // default duration
                if (_utilitaires.default.isNumeric(width) && _utilitaires.default.isNumeric(height)) {
                    this.Wmax = parseInt(width);
                    this.Hmax = parseInt(height);
                }
                this.Wo = this.Wmax * 0.75;
                this.Ho = this.Wo * this.Hmax / this.Wmax;
                this.period = this.dure / this.nbTour;
                this.setPosition();
                _coding.default.css(this._Element, {
                    'opacity': 0,
                    transform: 'scale(0.5)'
                });
                this.setOptions(_options);
                this.type = "basic";
                if (this.options === undefined || this.options.defaultBtn !== undefined && this.options.defaultBtn) {
                    var elem = _coding.default.get(this._Element), btns = undefined;
                    if (elem !== undefined) {
                        btns = elem.querySelector('.dcx-popup__header .btns');
                        if (btns !== undefined && btns !== null) {
                            var btn = btns.querySelector(btnCloseClass);
                            if (btn === undefined || btn == null) _coding.default.append(btns, btnClose);
                        } else console.log('POPUP LOG : ', "Impossible d'ajouter le bouton close! V\xe9rifier le code html de la popup...");
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                window.addEventListener('resize', function() {
                    _this.setPosition();
                }, false);
                this.setScrolling();
            }
        },
        {
            key: "show",
            value: function show() {
                if (this.options === undefined || this.options.fade !== undefined && this.options.fade) {
                    var elem = _coding.default.get(this._Element);
                    if (elem !== undefined) {
                        var fade = elem.parentNode.querySelector(fadeBoxClass);
                        if (fade === undefined || fade == null) _coding.default.append(elem.parentNode, fadeBox);
                        _fade.default.In(fadeBoxClass);
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                _coding.default.show(this._Element);
                (0, _animation).default({
                    type: "opacity",
                    object: this._Element,
                    value: 1,
                    time: this.dure,
                    prev: 0
                });
                (0, _animation).default({
                    type: "scale",
                    object: this._Element,
                    value: 1,
                    time: this.dure,
                    prev: 0.5
                });
                if (!this.dismissed) {
                    var _this = this;
                    _coding.default.event({
                        name: "click",
                        object: this._Element + " " + btnCloseClass + ", " + (this.options.cancelable ? fadeBoxClass : ""),
                        callback: function() {
                            _this.dismiss();
                        }
                    });
                }
                this.dismissed = false;
            }
        },
        {
            key: "initDC",
            value: function initDC(duration, width, height, eX, eY, wo, ho, _options) {
                if (this.elem != null) this._Element = this.elem; // content html of popup
                else alert("Error : element must not be null");
                this.Wo = wo;
                this.Ho = ho;
                this.Xo = eX * 0.5;
                this.Yo = eY * 0.5;
                if (_utilitaires.default.isNumeric(duration)) this.dure = parseFloat(duration);
                else this.dure = 15; // default duration
                this.Wo = 0.25 * width;
                this.Ho = 0.25 * height;
                if (_utilitaires.default.isNumeric(width) && _utilitaires.default.isNumeric(height)) {
                    this.Wmax = width;
                    this.Hmax = height;
                }
                this.setOptions(_options);
                this.type = "other";
                this.period = this.dure / this.nbTour;
                this.Wmax = this.Wmax > window.innerWidth ? window.innerWidth : this.Wmax;
                this.Hmax = this.Hmax > window.innerHeight ? window.innerHeight : this.Hmax;
                // positionning the popup at the user click position
                _coding.default.css(this._Element, {
                    'width': this.Wmax + "px",
                    'height': this.Hmax + "px",
                    'left': this.Xo + "px",
                    'top': this.Yo + "px",
                    'opacity': 0,
                    'transform': "scale(" + 1 / 4 + ", " + 1 / 8 + ")"
                });
                if (this.options === undefined || this.options.defaultBtn !== undefined && this.options.defaultBtn) {
                    var elem = _coding.default.get(this._Element), btns = undefined;
                    if (elem !== undefined) {
                        btns = elem.querySelector('.dcx-popup__header .btns');
                        if (btns !== undefined) {
                            var btn = btns.querySelector(btnCloseClass);
                            if (btn === undefined || btn == null) _coding.default.append(btns, btnClose);
                        } else console.log('POPUP LOG : ', "Impossible d'ajouter le bouton close! V\xe9rifier le code html de la popup...");
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                if (window.innerWidth <= 600) {
                    _coding.default.css(this._Element, {
                        'width': window.innerWidth + "px",
                        'height': window.innerHeight + "px",
                        'left': "0px",
                        'top': window.innerHeight + "px",
                        'opacity': 1,
                        'transform': "scale(1, 1)",
                        'borderRadius': "0"
                    });
                    this.period *= this.nbTour;
                    this.period = 300 / this.nbTour;
                    this.mobileShow();
                } else {
                    this.showDC();
                }
                this.setScrolling();
            }
        },
        {
            key: "showDC",
            value: function showDC() {
                var _this = this;
                if (this.options == null || this.options.fade !== undefined && this.options.fade) {
                    var elem = _coding.default.get(this._Element);
                    if (elem !== undefined) {
                        var fade = elem.parentNode.querySelector(fadeBoxClass);
                        if (fade === undefined || fade == null) _coding.default.append(elem.parentNode, fadeBox);
                        _fade.default.In(fadeBoxClass);
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                var NB = this.nbTour, obj = this;
                _coding.default.show(this._Element);
                var Ww = window.innerWidth, Wh = window.innerHeight;
                var fonct = function(_n) {
                    if (_n <= NB) {
                        var Xn = obj.Xo + _n * ((Ww - obj._Element.offsetWidth * _n / NB) / 2 - obj.Xo) / NB;
                        var Yn = obj.Yo + _n * ((Wh - obj._Element.offsetHeight * _n / NB) / 2 - obj.Yo) / NB;
                        //console.log(obj._Element.offsetWidth * _n/NB+"\n"+"X: "+ Xn + " - Y: "+Yn);
                        _coding.default.css(obj._Element, {
                            left: Xn + "px",
                            top: Yn + "px",
                            transform: "scale(" + _n / NB + ", " + _n / NB + ")",
                            opacity: _n / NB + ""
                        });
                        setTimeout(fonct, obj.period, _n + 1);
                    } else {
                        var _this1 = _this;
                        _coding.default.event({
                            name: "click",
                            object: _this._Element + " " + btnCloseClass + ", " + (_this.options.cancelable ? fadeBoxClass : ""),
                            callback: function() {
                                _this1.dismissDC();
                            }
                        });
                    }
                };
                fonct(1);
                this.dismissed = false;
            }
        },
        {
            key: "showZ",
            value: function showZ() {
                var _this = this;
                if (this.options == null || this.options.fade !== undefined && this.options.fade) {
                    var elem = _coding.default.get(this._Element);
                    if (elem !== undefined) {
                        var fade = elem.parentNode.querySelector(fadeBoxClass);
                        if (fade === undefined || fade == null) _coding.default.append(elem.parentNode, fadeBox);
                        _fade.default.In(fadeBoxClass);
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                var NB = this.nbTour;
                _coding.default.show(this._Element);
                var Ww = window.innerWidth, Wh = window.innerHeight;
                var fonct = function(_n) {
                    if (_n <= NB) {
                        //console.log(obj._Element.offsetWidth * _n/NB+"\n"+"X: "+ Xn + " - Y: "+Yn);
                        var Sxn = _this.scaleX + _n * (1 - _this.scaleX) / NB, Syn = _this.scaleY + _n * (1 - _this.scaleY) / NB;
                        var Xn = _this.Xo + _n * ((Ww - _coding.default.get(_this._Element).offsetWidth * Sxn) / 2 - _this.Xo) / NB;
                        var Yn = _this.Yo + _n * ((Wh - _coding.default.get(_this._Element).offsetHeight * Syn) / 2 - _this.Yo) / NB;
                        _coding.default.css(_this._Element, {
                            left: Xn + "px",
                            top: Yn + "px",
                            transform: "scale(" + Sxn + ", " + Syn + ")",
                            opacity: _n / NB + ""
                        });
                        setTimeout(fonct, _this.period, _n + 1);
                    } else {
                        var _this3 = _this;
                        _coding.default.event({
                            name: "click",
                            object: _this._Element + " " + btnCloseClass + ", " + (_this.options.cancelable ? fadeBoxClass : ""),
                            callback: function() {
                                _this3.dismissZ();
                            }
                        });
                    }
                };
                fonct(1);
                this.dismissed = false;
            }
        },
        {
            key: "initZ",
            value: function initZ(duration, eX, eY, wo, ho, _m, _my, _options) {
                if (this.elem != null) this._Element = this.elem; // content html of popup
                else alert("Error : element must not be null");
                this.Wo = wo;
                this.Ho = ho;
                this.Xo = eX;
                this.Yo = eY;
                if (_utilitaires.default.isNumeric(duration)) this.dure = parseFloat(duration);
                else this.dure = 15; // default duration
                var scaleX = _m, scaleY = _my === undefined ? _m : _my;
                this.Wmax = wo * scaleX;
                this.Hmax = ho * scaleY;
                if (this.Wmax > window.innerWidth) {
                    this.Wmax = window.innerWidth;
                    scaleX = this.Wmax / wo;
                }
                if (this.Hmax > window.innerHeight) {
                    this.Hmax = window.innerHeight;
                    scaleY = this.Hmax / ho;
                }
                this.Xo = this.Xo - (this.Wmax - this.Wo) / 2;
                this.Yo = this.Yo - (this.Hmax - this.Ho) / 2;
                this.period = this.dure / this.nbTour;
                // positionning the popup at the user click position
                _coding.default.css(this._Element, {
                    'width': this.Wmax + "px",
                    'height': this.Hmax + "px",
                    'left': this.Xo + "px",
                    'top': this.Yo + "px",
                    'opacity': 0,
                    'transform': "scale(" + 1 / scaleX + ", " + 1 / scaleY + ")",
                    'display': "block"
                });
                this.setOptions(_options);
                this.type = "improved";
                if (this.options == null || this.options.defaultBtn !== undefined && this.options.defaultBtn) {
                    var elem = _coding.default.get(this._Element), btns = undefined;
                    if (elem !== undefined) {
                        btns = elem.querySelector('.dcx-popup__header .btns');
                        if (btns !== undefined) {
                            var btn = btns.querySelector(btnCloseClass);
                            if (btn === undefined || btn == null) _coding.default.append(btns, btnClose);
                        } else console.log('POPUP LOG : ', "Impossible d'ajouter le bouton close! V\xe9rifier le code html de la popup...");
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                this.scaleX = 1 / scaleX;
                this.scaleY = 1 / scaleY;
                this.showZ();
                this.setScrolling();
            }
        },
        {
            key: "initM",
            value: function initM(duration, width, height, _options) {
                if (this.elem !== "") this._Element = this.elem; // container html of popup
                else console.log("Error popup: element must not be null");
                if (_utilitaires.default.isNumeric(duration)) this.dure = parseFloat(duration);
                else this.dure = 0.75; // default duration
                if (_utilitaires.default.isNumeric(width) && _utilitaires.default.isNumeric(height)) {
                    this.Wmax = parseInt(width);
                    this.Hmax = parseInt(height);
                }
                this.setOptions(_options);
                this.type = "mobile";
                this.period = this.dure / this.nbTour;
                this.Wmax = this.Wmax > window.innerWidth ? window.innerWidth : this.Wmax;
                this.Hmax = this.Hmax > window.innerHeight ? window.innerHeight : this.Hmax;
                _coding.default.css(this._Element, {
                    'width': this.Wmax + "px",
                    'height': this.Hmax + "px",
                    'left': _utilitaires.default.centerLeft(this.Wmax) + "px",
                    'top': window.innerHeight + "px",
                    'opacity': 1,
                    'transform': "scale(1, 1)",
                    'borderRadius': "0"
                });
                if (this.options === null || this.options.defaultBtn !== undefined && this.options.defaultBtn) {
                    var elem = _coding.default.get(this._Element), btns = undefined;
                    if (elem !== undefined) {
                        btns = elem.querySelector('.dcx-popup__header .btns');
                        if (btns !== undefined) {
                            var btn = btns.querySelector(btnCloseClass);
                            if (btn === undefined || btn == null) _coding.default.append(btns, btnClose);
                        } else console.log('POPUP LOG : ', "Impossible d'ajouter le bouton close! V\xe9rifier le code html de la popup...");
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                this.setScrolling();
            }
        },
        {
            key: "mobileShow",
            value: function mobileShow() {
                var _this = this;
                if (this.options === null || this.options.fade !== undefined && this.options.fade) {
                    var elem = _coding.default.get(this._Element);
                    if (elem !== undefined) {
                        var fade = elem.parentNode.querySelector(fadeBoxClass);
                        if (fade === undefined || fade == null) _coding.default.append(elem.parentNode, fadeBox);
                        _fade.default.In(fadeBoxClass);
                    } else console.log(log_name, 'Impossible d\'ajouter le bouton close! Identifiant introuvable dans le document');
                }
                _coding.default.show(this._Element);
                (0, _animation).default({
                    type: "top",
                    object: this._Element,
                    value: window.innerHeight - this.Hmax,
                    time: this.dure
                });
                _coding.default.event({
                    name: "click",
                    object: this._Element + " " + btnCloseClass + ", " + (this.options.cancelable ? fadeBoxClass : ""),
                    callback: function() {
                        _this.dismissMobile();
                    }
                });
                this.dismissed = false;
            }
        },
        {
            // dismisser methods
            key: "dismiss",
            value: function dismiss() {
                if (!this.dismissed) {
                    var _this = this;
                    //console.log(this);
                    _coding.default.show(this._Element);
                    (0, _animation).default({
                        type: "opacity",
                        object: this._Element,
                        value: 0,
                        time: this.dure,
                        prev: 1
                    });
                    (0, _animation).default({
                        type: "scale",
                        object: this._Element,
                        value: 0.5,
                        time: this.dure,
                        prev: 1
                    });
                    this.dismissed = true;
                    setTimeout(function() {
                        _coding.default.hide(_this._Element);
                    }, this.dure);
                    if (this.options == null || this.options.fade !== undefined && this.options.fade) {
                        _fade.default.out(fadeBoxClass);
                        setTimeout(function() {
                            _coding.default.remove(fadeBoxClass);
                        }, this.dure);
                    }
                }
            }
        },
        {
            key: "dismissDC",
            value: function dismissDC() {
                if (!this.dismissed) {
                    var _this = this;
                    var NB = this.nbTour;
                    _coding.default.show(this._Element);
                    var Ww = window.innerWidth, Wh = window.innerHeight;
                    var fonct = function(_n, _i) {
                        if (_n >= 0 && _i <= NB) {
                            var Xmax = (Ww - _coding.default.get(_this._Element).offsetWidth * _n / NB) / 2, Ymax = (Wh - _coding.default.get(_this._Element).offsetHeight * _n / NB) / 2;
                            var Xn = Xmax - _i * (Xmax - _this.Xo) / NB;
                            var Yn = Ymax - _i * (Ymax - _this.Yo) / NB;
                            _coding.default.css(_this._Element, {
                                left: Xn + "px",
                                top: Yn + "px",
                                transform: "scale(" + _n / NB + ", " + _n / NB + ")",
                                opacity: _n / NB + ""
                            });
                            setTimeout(fonct, _this.period, _n - 1, _i + 1);
                        } else {
                            //obj = null;
                            return 0;
                        }
                    };
                    fonct(NB, 0);
                    this.dismissed = true;
                    setTimeout(function() {
                        _coding.default.hide(_this._Element);
                    }, this.dure);
                    if (this.options == null || this.options.fade !== undefined && this.options.fade) {
                        _fade.default.out(fadeBoxClass);
                        setTimeout(function() {
                            _coding.default.remove(fadeBoxClass);
                        }, this.dure);
                    }
                }
            }
        },
        {
            key: "dismissZ",
            value: function dismissZ() {
                if (!this.dismissed) {
                    var _this = this;
                    var NB = this.nbTour;
                    _coding.default.show(this._Element);
                    var Ww = window.innerWidth, Wh = window.innerHeight;
                    var fonct = function(_n, _i) {
                        if (_n >= 0 && _i <= NB) {
                            var Sxn = _this.scaleX + _n * (1 - _this.scaleX) / NB, Syn = _this.scaleY + _n * (1 - _this.scaleY) / NB;
                            var Xmax = (Ww - _coding.default.get(_this._Element).offsetWidth * Sxn) / 2, Ymax = (Wh - _coding.default.get(_this._Element).offsetHeight * Syn) / 2;
                            var Xn = Xmax - _i * (Xmax - _this.Xo) / NB;
                            var Yn = Ymax - _i * (Ymax - _this.Yo) / NB;
                            _coding.default.css(_this._Element, {
                                left: Xn + "px",
                                top: Yn + "px",
                                transform: "scale(" + Sxn + ", " + Syn + ")",
                                opacity: _n / NB + ""
                            });
                            _coding.default.css(fadeBoxClass, {
                                opacity: 0.8 - NB / (_n + 1) + ""
                            });
                            setTimeout(fonct, _this.period, _n - 1, _i + 1);
                        } else return 0;
                    };
                    fonct(NB, 0);
                    this.dismissed = true;
                    setTimeout(function() {
                        _coding.default.hide(_this._Element);
                    }, this.dure);
                    if (this.options == null || this.options.fade !== undefined && this.options.fade) {
                        _fade.default.out(fadeBoxClass);
                        setTimeout(function() {
                            _coding.default.remove(fadeBoxClass);
                        }, this.dure);
                    }
                }
            }
        },
        {
            key: "dismissMobile",
            value: function dismissMobile() {
                if (!this.dismissed) {
                    var _this = this;
                    _coding.default.show(this._Element);
                    (0, _animation).default({
                        type: "top",
                        object: this._Element,
                        value: window.innerHeight,
                        time: this.dure
                    });
                    setTimeout(function() {
                        _coding.default.hide(_this._Element);
                    }, this.dure);
                    if (this.options == null || this.options.fade !== undefined && this.options.fade) {
                        _fade.default.out(fadeBoxClass);
                        setTimeout(function() {
                            _coding.default.remove(fadeBoxClass);
                        }, this.dure);
                    }
                    this.dismissed = true;
                }
            }
        }
    ]);
    return Popup;
}();
var _default = Popup;
exports.default = _default;
