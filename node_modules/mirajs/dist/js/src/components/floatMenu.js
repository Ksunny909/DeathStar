"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var FloatMenu = /*#__PURE__*/ function() {
    "use strict";
    function FloatMenu(element, contents, isSelect) {
        if (isSelect === void 0) isSelect = false;
        var _this = this;
        _classCallCheck(this, FloatMenu);
        // Binding
        this.handleWindow = this.handleWindow.bind(this);
        this.onWindowScroll = this.onWindowScroll.bind(this);
        this.element = element;
        this.contents = contents;
        this.isSelect = isSelect;
        var rect = this.element.getBoundingClientRect();
        var x = rect.x;
        var y = rect.y;
        this.menu = this.createDivWithClass('float__menu');
        this.menu.style.minWidth = "" + 150 + "px";
        if (window.innerHeight - y > 350) this.menu.style.maxHeight = "calc(100vh - " + y + "px - 100px)";
        this.menu.style.overflowY = "auto";
        this.menu.style.borderRadius = '6px';
        this.items = this.contents.map(function(item) {
            return _this.getMenuItem(item);
        });
        this.items.forEach(function(item) {
            return _this.menu.appendChild(item);
        });
        document.querySelector('body').appendChild(this.menu);
        // Set position of the element.
        this.setPosition(x, y);
        this.init = true;
        window.addEventListener('mouseup', this.handleWindow);
    }
    _createClass(FloatMenu, [
        {
            key: "handleWindow",
            value: function handleWindow(e) {
                console.log('DDD', e);
                var items = this.menu.querySelectorAll("*");
                var isItem = false, i = 0;
                while(!isItem && i < items.length){
                    if (e.target === items[i] || e.target === this.menu) isItem = true;
                    i++;
                }
                if (!isItem) this.removeMenu();
            }
        },
        {
            key: "setPosition",
            value: function setPosition(x, y) {
                if (this.isSelect) this.menu.style.left = "" + x + "px";
                else this.menu.style.left = "" + (x - this.menu.offsetWidth + 24) + "px";
                if (y + this.element.offsetHeight + 25 > window.innerHeight) y = y - this.menu.offsetHeight + 25;
                this.menu.style.top = "" + y + "px";
                window.addEventListener('scroll', this.onWindowScroll);
            }
        },
        {
            key: "onWindowScroll",
            value: function onWindowScroll(e) {
                var rect = this.element.getBoundingClientRect();
                this.menu.style.top = "" + rect.y + "px";
                this.menu.style.left = "" + rect.x + "px";
            }
        },
        {
            key: "removeMenu",
            value: function removeMenu() {
                console.log('Element is remove.');
                this.menu.remove();
                window.removeEventListener('mouseup', this.handleWindow);
                window.removeEventListener('scroll', this.onWindowScroll);
            }
        },
        {
            /**
     * @param {{title: string, onClick: function, icon: string}} item
     * @returns {HTMLElement}
     */ key: "getMenuItem",
            value: function getMenuItem(item) {
                var _this = this;
                var has_icon = item.icon !== undefined && item.icon !== null;
                var menuItem = this.createDivWithClass("float__menu-item " + (has_icon ? 'between' : 'center'));
                menuItem.innerHTML = (has_icon ? "<span class=\"float__menu-item-icon\"><i class=\"" + item.icon + "\"> </i></span>" : '') + "\n        <span class=\"float__menu-item-title\">" + item.title + "</span>";
                menuItem.addEventListener('mousedown', function() {
                    return _this.onItemClick(item);
                });
                return menuItem;
            }
        },
        {
            key: "onItemClick",
            value: function onItemClick(item) {
                item.onClick();
                this.menu.remove();
            }
        },
        {
            /**
     * @param {string} className
     * @returns {HTMLElement}
     */ key: "createDivWithClass",
            value: function createDivWithClass(className) {
                var div = document.createElement('div');
                div.className = className;
                return div;
            }
        }
    ]);
    return FloatMenu;
}();
exports.default = FloatMenu;
