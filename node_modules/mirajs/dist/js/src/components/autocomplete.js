"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _coding = _interopRequireDefault(require("../coding"));
var _utilitaires = _interopRequireDefault(require("../utilitaires"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * @param _form {string}
 * @param _obj {{?type: string, source: string, width: string|number, noterm: boolean}}
 * @returns object
 */ var Autocomplete = function(_form, _obj) {
    var ret = null;
    try {
        var form = _coding.default.get(_form);
        if (typeof _obj === "object") {
            var type = _obj.type, src = _obj.source, input = form.querySelector(".auto-complete"), list = newSuggestion(), tabStr = [];
            form.appendChild(list);
            _coding.default.css(form, {
                position: "relative"
            });
            if (typeof _obj.width === "number") {
                if (_obj.width > 0) _coding.default.css(list, {
                    width: input.offsetWidth + "px",
                    marginLeft: input.offsetLeft + "px"
                });
            }
            input.onblur = function() {
                setTimeout(function() {
                    _coding.default.hide(list);
                }, 500);
            };
            if (typeof src !== "string" && src.length !== undefined) {
                for(var i = 0; i < src.length; i++)tabStr.push(src[i].text);
            }
            input.onkeyup = function(e1) {
                _coding.default.css(list, {
                    top: input.offsetTop + input.offsetHeight + "px",
                    left: "0"
                });
                var val = e1.currentTarget.value;
                _coding.default.hide(list);
                if (typeof src === "string") {
                    if (_obj.noterm !== undefined && _obj.noterm) src += val;
                    else src += "?term=" + val;
                    _coding.default.ajax({
                        url: src + "?term=" + val,
                        type: "GET",
                        data: "term=" + val,
                        success: function(_rep) {
                            try {
                                var tab = JSON.parse(_rep);
                                worker(tab);
                            } catch (e) {
                                console.log(e);
                            }
                        }
                    });
                } else if (src.length !== undefined && val.trim() !== "") {
                    var resIndex = _utilitaires.default.algo.search.string(val, tabStr), tab1 = [];
                    for(var i = 0; i < resIndex.length; i++)tab1.push(src[resIndex[i]]);
                    worker(tab1);
                }
            };
            var worker = function(_tab) {
                var tab = _tab;
                if (typeof tab.length === "number") {
                    var _loop = function(i) {
                        var item = _coding.default.new('div'), json = tab[i];
                        item.className = "dcx-item clickable";
                        var html = "";
                        if (typeof json.img === "undefined") {
                            html += '<span class="dcx-item__title">' + json.text + '</span>';
                        } else {
                            if (json.img !== "") html += '<span class="dcx-item__avatar"><img src="' + json.img + '"></span><span class="dcx-item__title">' + json.text + '</span>';
                            else html += '<span class="dcx-item__avatar">' + json.text + '</span>';
                        }
                        item.innerHTML = html;
                        item.onclick = function() {
                            input.value = json.text;
                            _coding.default.hide(list);
                            if (form.submit !== undefined) form.submit();
                        };
                        list.appendChild(item);
                    };
                    list.innerHTML = "";
                    for(var i = 0; i < tab.length; i++)_loop(i);
                    _coding.default.show(list);
                }
            };
            ret = list;
        } else console.log("_obj must be an object");
    } catch (e) {
        console.log(e);
    }
    return ret;
};
var newSuggestion = function() {
    var div = _coding.default.new('div');
    div.className = "dcx-list dcx-suggestion";
    return div;
};
var _default = Autocomplete;
exports.default = _default;
