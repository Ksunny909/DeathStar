"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _carouselTouchPlugin = _interopRequireDefault(require("./carousel_touch_plugin"));
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var SimpleCarousel = /*#__PURE__*/ function() {
    "use strict";
    function SimpleCarousel(element, options) {
        if (options === void 0) options = {};
        var _this = this;
        _classCallCheck(this, SimpleCarousel);
        this.element = element;
        this.options = Object.assign({}, {
            slidesToScroll: 1,
            slidesVisible: 1,
            looping: false,
            infinite: false,
            pagination: true,
            enabledTouch: true,
            timer: 0
        }, options);
        this.setExceptions(element);
        this.slideCallbacks = [];
        this.paginates = [];
        this.currentItem = 0;
        this.isMobile = false;
        if (element === undefined) {
            console.error("Indiquer un \xe9l\xe9ment du document pour le carousel.", element);
            return;
        }
        var children = [].slice.call(element.children); // Récupération des enfants au moment de l' execution du script.
        // Manipulation du dom.
        this.domManagement(children, element);
        this.setStyles();
        this.createNavigations();
        this.createPaginations();
        // Gestion des événements.
        this.slideCallbacks.forEach(function(callback) {
            return callback(_this.currentItem);
        });
        this.onWindowResize();
        window.addEventListener('resize', this.onWindowResize.bind(this));
        this.root.addEventListener('keyup', function(e) {
            if (e.key === 'ArrowRight' || e.key === 'Right') {
                _this.next();
            } else if (e.key === 'ArrowLeft' || e.key === 'Left') {
                _this.previous();
            }
        });
        this.root.addEventListener('mouseover', this.clearTimer.bind(this));
        this.root.addEventListener('mouseleave', this.setTimer.bind(this));
        if (this.options.infinite) {
            this.container.addEventListener('transitionend', this.resetInfinite.bind(this));
        }
        // Touche.
        if (this.options.enabledTouch) new _carouselTouchPlugin.default(this);
        // Timer
        this.setTimer();
    }
    _createClass(SimpleCarousel, [
        {
            /**
     * Set timer method.
     */ key: "setTimer",
            value: function setTimer() {
                if (this.options.timer > 0) {
                    var _this = this;
                    this.timeOut = setInterval(function() {
                        _this.next();
                    }, this.options.timer);
                }
            }
        },
        {
            /**
     * Clear timer method.
     */ key: "clearTimer",
            value: function clearTimer() {
                if (this.timeOut !== undefined && this.timeOut !== null) {
                    clearInterval(this.timeOut);
                }
            }
        },
        {
            key: "slidesToScroll",
            get: /**
     * @returns {Number}
     */ function get() {
                return this.isMobile ? 1 : this.options.slidesToScroll;
            }
        },
        {
            key: "slidesVisible",
            get: /**
     * @returns {Number}
     */ function get() {
                return this.isMobile ? 1 : this.options.slidesVisible;
            }
        },
        {
            key: "containerWidth",
            get: /**
     * @returns {number}
     */ function get() {
                return this.container.offsetWidth;
            }
        },
        {
            key: "carouselWidth",
            get: /**
     * @returns {number}
     */ function get() {
                return this.root.offsetWidth;
            }
        },
        {
            /**
     * Pour la gestion des exceptions.
     * @param {HTMLElement} element
     */ key: "setExceptions",
            value: function setExceptions(element) {
                var _options = this.options, slidesToScroll = _options.slidesToScroll, slidesVisible = _options.slidesVisible, timer = _options.timer, looping = _options.looping, infinite = _options.infinite, pagination = _options.pagination;
                if (slidesToScroll === undefined) {
                    console.error("L' attribute 'slidesToScroll' n' est pas d\xe9fini : ", element);
                } else if (typeof slidesToScroll != 'number') {
                    console.error("Le type de l' attribute 'slidesToScroll' doit \xeatre un number : ", element);
                }
                if (slidesVisible === undefined) {
                    console.error("L' attribute 'slidesVisible' n' est pas d\xe9fini : ", element);
                } else if (typeof slidesVisible != 'number') {
                    console.error("Le type de l' attribute 'slidesVisible' doit \xeatre un number : ", element);
                }
                if (timer === undefined) {
                    console.error("L' attribute 'timer' n' est pas d\xe9fini : ", element);
                } else if (typeof timer != 'number') {
                    console.error("Le type de l' attribute 'timer' doit \xeatre un number : ", element);
                }
                if (looping === undefined) {
                    console.error("L' attribute 'looping' n' est pas d\xe9fini : ", element);
                } else if (typeof looping != 'boolean') {
                    console.error("Le type de l' attribute 'looping' doit \xeatre un boolean : ", element);
                }
                if (infinite === undefined) {
                    console.error("L' attribute 'infinite' n' est pas d\xe9fini : ", element);
                } else if (typeof infinite != 'boolean') {
                    console.error("Le type de l' attribute 'infinite' doit \xeatre un boolean : ", element);
                }
                if (pagination === undefined) {
                    console.error("L' attribute 'pagination' n' est pas d\xe9fini : ", element);
                } else if (typeof pagination != 'boolean') {
                    console.error("Le type de l' attribute 'pagination' doit \xeatre un boolean : ", element);
                }
            }
        },
        {
            /**
     * Appliquer les bonnes dimensions au items du carousel.
     */ key: "setStyles",
            value: function setStyles() {
                var _this = this;
                var ratio = this.items.length / this.slidesVisible;
                this.container.style.width = ratio * 100 + "%";
                this.items.forEach(function(item) {
                    return item.style.width = 100 / _this.slidesVisible / ratio + '%';
                });
            }
        },
        {
            /**
     * Ajout des boutons de navigations sur le carousel.
     */ key: "createNavigations",
            value: function createNavigations() {
                var _this = this;
                var nextButton = this.createDivWithClass('carousel__next');
                nextButton.innerHTML = '<i class="arrow right"></i>';
                var prevButton = this.createDivWithClass('carousel__prev');
                prevButton.innerHTML = '<i class="arrow left"></i>';
                this.root.appendChild(nextButton);
                this.root.appendChild(prevButton);
                nextButton.addEventListener('click', this.next.bind(this));
                prevButton.addEventListener('click', this.previous.bind(this));
                this.onSlide(function(index) {
                    if (!_this.options.looping) {
                        if (index === 0) {
                            prevButton.classList.add('carousel__btn_hide');
                        } else {
                            prevButton.classList.remove('carousel__btn_hide');
                        }
                        if (_this.items[_this.currentItem + _this.slidesToScroll] === undefined) {
                            nextButton.classList.add('carousel__btn_hide');
                        } else {
                            nextButton.classList.remove('carousel__btn_hide');
                        }
                    }
                    _this.setPaginate();
                });
            }
        },
        {
            /**
     * Pagination du carousel.
     */ key: "createPaginations",
            value: function createPaginations() {
                if (this.options.pagination) {
                    this.paginates = [];
                    var position = 0;
                    for(var i = 1; i <= this.items.length / this.slidesToScroll; i++){
                        var pagination_item = this.createDivWithClass('carousel__pagination-item');
                        pagination_item.setAttribute('data-position', '' + position);
                        pagination_item.addEventListener('click', this.onPaginate.bind(this));
                        this.paginates.push(pagination_item);
                        position += this.slidesToScroll;
                    }
                }
                this.setPaginate();
            }
        },
        {
            /**
     * Au clique sur une pagination.
     * @param {MouseEvent} event
     */ key: "onPaginate",
            value: function onPaginate(event) {
                var position = event.currentTarget.dataset.position;
                this.gotToItem(parseInt(position));
            }
        },
        {
            /**
     * Pagination courante.
     */ key: "setPaginate",
            value: function setPaginate() {
                if (this.options.pagination) {
                    var _this = this;
                    this.pagination.innerHTML = '';
                    this.paginates.forEach(function(item, position) {
                        if (_this.currentItem / _this.slidesToScroll === position) {
                            item.classList.add('current');
                        } else {
                            item.classList.remove('current');
                        }
                        _this.pagination.appendChild(item);
                    });
                }
            }
        },
        {
            /**
     * Partir à l' item suivant.
     */ key: "next",
            value: function next() {
                var position = this.currentItem + this.slidesToScroll;
                if (this.nextApprove()) if (this.options.looping) {
                    position = 0;
                } else {
                    return;
                }
                this.gotToItem(position);
            }
        },
        {
            /**
     * Permet de savoir si on peut avancer.
     * @returns {boolean}
     */ key: "nextApprove",
            value: function nextApprove() {
                var position = this.currentItem + this.slidesToScroll;
                return position >= this.items.length || this.items[position] === undefined && position > this.currentItem;
            }
        },
        {
            /**
     * Revenir à l' item précédant.
     */ key: "previous",
            value: function previous() {
                var position = this.currentItem - this.slidesToScroll;
                if (position < 0) if (this.options.looping) {
                    position = this.items.length - this.slidesToScroll;
                } else {
                    return;
                }
                this.gotToItem(position);
            }
        },
        {
            /**
     * Déplacer l' item courant vers l' item ciblé.
     * @param {number} index
     * @param {boolean} animate
     */ key: "gotToItem",
            value: function gotToItem(index, animate) {
                if (animate === void 0) animate = true;
                var translateX = index * -100 / this.items.length;
                if (!animate) {
                    this.disableTransition();
                }
                this.translate(translateX);
                this.container.offsetHeight; // Forcé le repaint, pour annuler les animations.
                if (!animate) {
                    this.enableTransition();
                }
                this.currentItem = index;
                this.slideCallbacks.forEach(function(callback) {
                    return callback(index);
                });
            }
        },
        {
            /**
     * Annuler les transitions.
     */ key: "disableTransition",
            value: function disableTransition() {
                this.container.style.transition = 'none';
            }
        },
        {
            /**
     * Activer les transitions.
     */ key: "enableTransition",
            value: function enableTransition() {
                this.container.style.transition = '';
            }
        },
        {
            /**
     * Déplacer le carousel pour donner l' impression d' un slide infini.
     */ key: "resetInfinite",
            value: function resetInfinite() {
                if (this.currentItem <= this.options.slidesToScroll) {
                    this.gotToItem(this.currentItem + this.items.length - 2 * this.offset, false);
                } else if (this.currentItem >= this.items.length - this.offset) {
                    this.gotToItem(this.currentItem - (this.items.length - 2 * this.offset), false);
                }
            }
        },
        {
            /**
     *
     * @param {slideCallback} callback
     */ key: "onSlide",
            value: function onSlide(callback) {
                this.slideCallbacks.push(callback);
            }
        },
        {
            key: "onWindowResize",
            value: function onWindowResize() {
                var mobile = window.innerWidth < 800;
                if (mobile !== this.isMobile) {
                    var _this = this;
                    this.isMobile = mobile;
                    this.setStyles();
                    this.createPaginations();
                    this.slideCallbacks.forEach(function(cb) {
                        return cb(_this.currentItem);
                    });
                }
            }
        },
        {
            /**
     * @param {String} className
     * @returns {HTMLElement}
     */ key: "createDivWithClass",
            value: function createDivWithClass(className) {
                var div = document.createElement('div');
                div.setAttribute('class', className);
                return div;
            }
        },
        {
            /**
     * @param {number} percent
     */ key: "translate",
            value: function translate(percent) {
                this.container.style.transform = "translate3d(" + percent + "%, 0, 0)";
            }
        },
        {
            /**
     * Gestion du document.
     */ key: "domManagement",
            value: function domManagement(children, element) {
                var _this = this;
                this.root = this.createDivWithClass('simple__carousel');
                this.container = this.createDivWithClass('carousel__container');
                this.root.appendChild(this.container);
                this.root.setAttribute('tabindex', '0');
                this.element.appendChild(this.root);
                this.pagination = this.createDivWithClass('carousel__pagination');
                this.root.appendChild(this.pagination);
                this.items = children.map(function(child) {
                    var item = _this.createDivWithClass('carousel__item');
                    item.appendChild(child);
                    return item;
                });
                if (this.options.infinite) {
                    this.options = _extends({}, this.options, {
                        pagination: false
                    });
                    this.offset = this.options.slidesVisible + this.options.slidesToScroll;
                    if (this.offset > children.length) {
                        console.error("Le nombre d' \xe9l\xe9ment dans le carousel est insuffisant pour le slide infini.", element);
                    }
                    this.items = _toConsumableArray(this.items.slice(this.items.length - this.offset).map(function(item) {
                        return item.cloneNode(true);
                    })).concat(_toConsumableArray(this.items), _toConsumableArray(this.items.slice(0, this.offset).map(function(item) {
                        return item.cloneNode(true);
                    })));
                    this.gotToItem(this.offset, false);
                }
                this.items.forEach(function(item) {
                    return _this.container.appendChild(item);
                });
            }
        }
    ]);
    return SimpleCarousel;
}();
exports.default = SimpleCarousel;
