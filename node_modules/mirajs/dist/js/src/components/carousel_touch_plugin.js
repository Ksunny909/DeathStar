"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var CarouselTouchPlugin = /*#__PURE__*/ function() {
    "use strict";
    function CarouselTouchPlugin(carousel) {
        _classCallCheck(this, CarouselTouchPlugin);
        this.carousel = carousel;
        this.carousel.container.addEventListener('dragstart', function(e) {
            return e.preventDefault();
        });
        this.carousel.container.addEventListener('mousedown', this.startDrag.bind(this));
        this.carousel.container.addEventListener('touchstart', this.startDrag.bind(this));
        window.addEventListener('mousemove', this.drag.bind(this));
        window.addEventListener('touchmove', this.drag.bind(this));
        window.addEventListener('mouseup', this.endDrag.bind(this));
        window.addEventListener('touchend', this.endDrag.bind(this));
        window.addEventListener('touchcancel', this.endDrag.bind(this));
    }
    _createClass(CarouselTouchPlugin, [
        {
            /**
     * Pour le debut du tactile.
     * @param {TouchEvent | MouseEvent} e
     */ key: "startDrag",
            value: function startDrag(e) {
                if (e.touches) {
                    if (e.touches.length > 1) return;
                    e = e.touches[0];
                }
                this.origin = {
                    x: e.screenX,
                    y: e.screenY
                };
                this.width = this.carousel.containerWidth;
                this.carousel.disableTransition();
            }
        },
        {
            /**
     * Pour le déplacement après le clique du tactile.
     * @param {TouchEvent | MouseEvent} e
     */ key: "drag",
            value: function drag(e) {
                if (this.origin) {
                    var point = e.touches ? e.touches[0] : e;
                    var translate = {
                        x: point.screenX - this.origin.x,
                        y: point.screenY - this.origin.y
                    };
                    if (e.touches && Math.abs(translate.x) > Math.abs(translate.y)) {
                        // e.preventDefault();
                        e.stopPropagation();
                    }
                    var baseTranslate = this.carousel.currentItem * -100 / this.carousel.items.length;
                    this.lastTranslate = translate;
                    this.carousel.translate(baseTranslate + 100 * translate.x / this.width);
                }
            }
        },
        {
            /**
     * Pour la fin du déplacement après le clique du tactile.
     * @param {TouchEvent | MouseEvent} e
     */ key: "endDrag",
            value: function endDrag(e) {
                this.carousel.enableTransition();
                if (this.origin && this.lastTranslate) {
                    if (Math.abs(this.lastTranslate.x / this.carousel.carouselWidth) > 0.2) {
                        if (this.lastTranslate.x < 0 && !this.carousel.nextApprove()) {
                            this.carousel.next();
                        } else if (this.lastTranslate.x > 0 && this.carousel.currentItem !== 0) {
                            this.carousel.previous();
                        } else {
                            this.carousel.gotToItem(this.carousel.currentItem);
                        }
                    } else {
                        this.carousel.gotToItem(this.carousel.currentItem);
                    }
                }
                this.origin = null;
                this.lastTranslate = null;
            }
        }
    ]);
    return CarouselTouchPlugin;
}();
exports.default = CarouselTouchPlugin;
