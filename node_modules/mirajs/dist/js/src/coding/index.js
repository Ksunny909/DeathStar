"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _utilitaires = _interopRequireDefault(require("../utilitaires"));
var _animation = _interopRequireDefault(require("../components/animation"));
var _toast = _interopRequireDefault(require("../components/toast"));
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var DcCoding = /**
 * MiraJS DOM
 * All methods that fires on DOM.
 * @copyright DcCorp.
 * @author Daniel SAKOU
 * 15/07/2020
 */ /*#__PURE__*/ function() {
    "use strict";
    function DcCoding() {
        var _this = this;
        _classCallCheck(this, DcCoding);
        _defineProperty(this, "requet", []);
        _defineProperty(this, /**
     * @type {{task: (function(string, (JSON|string), {success: Function, progress: Function, error: Function}, string): Promise<any>), post: (function(string, JSON, {success: Function, progress: Function, error: Function}): (*|Promise<any>)), get: (function(string, {success: Function, progress: Function, error: Function}): (*|Promise<any>)), options: (function(string, JSON, {success: Function, progress: Function, error: Function}): (*|Promise<any>)), delete: (function(string, JSON, {success: Function, progress: Function, error: Function}): (*|Promise<any>)), put: (function(string, JSON, {success: Function, progress: Function, error: Function}): (*|Promise<any>))}}
     */ "httpClient", {
            /**
         * @param _url {string}
         * @param _data {JSON|string}
         * @param _callbacks {{success: Function, progress: Function, error: Function}}
         * @param _type {string}
         * @return {Promise<any>}
         */ task: function(_url, _data, _callbacks, _type) {
                return _this.ajax({
                    url: _url,
                    type: _type,
                    contentType: "application/json",
                    data: typeof _data !== "string" ? JSON.stringify(_data) : "",
                    progress: function(e) {
                        if (typeof _callbacks === "object" && _callbacks != null) {
                            if (typeof _callbacks.progress !== "undefined") _callbacks.progress(e);
                        }
                    },
                    success: function(_rep) {
                        if (typeof _callbacks === "object" && _callbacks != null) {
                            if (typeof _callbacks.success !== "undefined") _callbacks.success(JSON.parse(_rep));
                        }
                    },
                    error: function(e) {
                        if (typeof _callbacks === "object" && _callbacks != null) {
                            if (typeof _callbacks.error !== "undefined") _callbacks.error(e);
                        }
                    }
                });
            },
            /**
         * @param _url {string}
         * @param _data {JSON}
         * @param _callbacks {{success: Function, progress: Function, error: Function}}
         * @return {Promise<any>}
         */ post: function(_url, _data, _callbacks) {
                return _this.httpClient.task(_url, _data, _callbacks, "POST");
            },
            /**
         * @param _url {string}
         * @param _callbacks {{success: Function, progress: Function, error: Function}}
         * @return {Promise<any>}
         */ get: function(_url, _callbacks) {
                return _this.httpClient.task(_url, "", _callbacks, "POST");
            },
            /**
         * @param _url {string}
         * @param _data {JSON}
         * @param _callbacks {{success: Function, progress: Function, error: Function}}
         * @return {Promise<any>}
         */ put: function(_url, _data, _callbacks) {
                return _this.httpClient.task(_url, _data, _callbacks, "PUT");
            },
            /**
         * @param _url {string}
         * @param _data {JSON}
         * @param _callbacks {{success: Function, progress: Function, error: Function}}
         * @return {Promise<any>}
         */ delete: function(_url, _data, _callbacks) {
                return _this.httpClient.task(_url, _data, _callbacks, "DELETE");
            },
            /**
         * @param _url {string}
         * @param _data {JSON}
         * @param _callbacks {{success: Function, progress: Function, error: Function}}
         * @return {Promise<any>}
         */ options: function(_url, _data, _callbacks) {
                return _this.httpClient.task(_url, _data, _callbacks, "OPTIONS");
            }
        });
    }
    _createClass(DcCoding, [
        {
            /**
     * @method get()
     * @param _id {string|HTMLElement}
     * Selects html element(s)
     * @returns {HTMLElement|HTMLCollection}
     */ key: "get",
            value: function get(_id) {
                var ret = null;
                try {
                    if (typeof _id === "string" && _id.trim() !== "") {
                        var tab = document.querySelectorAll(_id);
                        if (typeof tab.length != 'undefined') {
                            if (tab.length > 1) ret = tab;
                            else ret = tab[0];
                        } else console.log('Provide a correct html selector !');
                    } else if (_id !== null) ret = _id;
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @method gets()
     * @param _id {string|HTMLElement}
     * Select html elements
     * @returns {HTMLCollection}
     */ key: "gets",
            value: function gets(_id) {
                var ret = null;
                try {
                    if (typeof _id === "string" && _id.trim() !== "") {
                        var tab = document.querySelectorAll(_id);
                        if (typeof tab.length != 'undefined') {
                            ret = tab;
                        } else console.log('Provide a correct html selector !');
                    } else if (_id !== null) ret = _id;
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @method new()
     * @param _id {string}
     * Creates Html element.
     * @returns {HTMLElement}
     */ key: "new",
            value: function _new(_id) {
                if (typeof _id == "string") return document.createElement(_id);
                else {
                    console.log('Provide a correct html selector !');
                    return null;
                }
            }
        },
        {
            /**
     * @method remove()
     * @param _id {string|HTMLElement}
     * Remove html element(s)
     * @returns {Boolean}
     */ key: "remove",
            value: function remove(_id) {
                var ret = false;
                try {
                    if (typeof _id === "string" && _id !== "") {
                        if (this.get(_id) !== undefined) {
                            for(var i = 0; i < this.gets(_id).length; i++){
                                if (this.gets(_id)[i].parentNode !== undefined) {
                                    this.gets(_id)[i].parentNode.removeChild(this.gets(_id)[i]);
                                    ret = true;
                                }
                            }
                        }
                    } else if (typeof _id !== "string" && _id != null) {
                        _id.parentNode.removeChild(_id);
                        ret = true;
                    }
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @method hide()
     * @param _id {string|HTMLElement}
     * Hide html element(s)
     * @returns {Boolean}
     */ key: "hide",
            value: function hide(_id) {
                var ret = false;
                try {
                    if (typeof _id === "string" && _id !== "") {
                        var selectors = _id.split(",");
                        for(var j = 0; j < selectors.length; j++){
                            var tab = this.gets(selectors[j].trim());
                            if (tab !== undefined) {
                                for(var i = 0; i < tab.length; i++)this.css(tab[i], {
                                    display: "none"
                                });
                                ret = true;
                            }
                        }
                    } else if (typeof _id !== "string" && _id != null) {
                        this.css(_id, {
                            display: "none"
                        });
                        ret = true;
                    }
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * Displays html element(s)
     * @return {boolean}
     */ key: "show",
            value: function show(_id) {
                var ret = false;
                try {
                    if (typeof _id === "string" && _id !== "") {
                        var selectors = _id.split(",");
                        for(var j = 0; j < selectors.length; j++){
                            var tab = this.gets(selectors[j].trim());
                            if (tab !== undefined) {
                                for(var i = 0; i < tab.length; i++)this.css(tab[i], {
                                    display: "block"
                                });
                                ret = true;
                            }
                        }
                    } else if (typeof _id !== "string" && _id != null) {
                        this.css(_id, {
                            display: "block"
                        });
                        ret = true;
                    }
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @param _obj {string|HTMLElement}
     * @param _time {Number|string}
     * Hide/Show html element(s)
     * @return {string}
     */ key: "slideToggle",
            value: function slideToggle(_obj, _time) {
                var obj = this.get(_obj), ret = "";
                try {
                    if (obj !== undefined && obj.length === undefined) {
                        if (obj.offsetHeight === 0 && obj.offsetWidth === 0) {
                            var _this = this;
                            this.css(obj, {
                                opacity: "0",
                                height: "auto"
                            });
                            this.show(obj);
                            var height = obj.offsetHeight;
                            this.css(obj, {
                                opacity: "1"
                            });
                            (0, _animation).default({
                                type: "height",
                                object: obj,
                                value: height,
                                time: parseInt(_time),
                                prev: 0
                            });
                            _utilitaires.default.delay(parseInt(_time) / 1000, function() {
                                _this.css(obj, {
                                    height: "auto"
                                });
                            });
                            ret = "show";
                        } else {
                            var _this1 = this;
                            (0, _animation).default({
                                type: "height",
                                object: obj,
                                value: 0,
                                time: parseInt(_time)
                            });
                            _utilitaires.default.delay(parseInt(_time) / 1000, function() {
                                _this1.hide(obj);
                                _this1.css(obj, {
                                    opacity: "0",
                                    height: "auto"
                                });
                            });
                            ret = "hide";
                        }
                    }
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * Returns html content of an html element.
     * @return {string}
     */ key: "getContent",
            value: function getContent(_id) {
                var content = "";
                try {
                    if (typeof _id === "string" && _id !== "") {
                        content = this.get(_id).innerHTML;
                    } else if (typeof _id !== "string" && _id != null) {
                        content = _id.innerHTML;
                    }
                } catch (e) {
                    console.log(e);
                }
                return content;
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * @param _content {string}
     * Defines _content to an html element
     * @return {HTMLElement|HTMLCollection}
     */ key: "setContent",
            value: function setContent(_id, _content) {
                var elem = this.get(_id);
                try {
                    if (elem !== undefined && elem.length === undefined) {
                        elem.innerHTML = "";
                        if (_content.trim() !== "") this.append(elem, _content);
                    }
                } catch (e) {
                    console.log(e);
                }
                return elem;
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * @param _content {string}
     * Appends _content (html code string) to an html element.
     * @return {null}
     */ key: "append",
            value: function append(_id, _content) {
                var elem = this.get(_id), ret = null;
                try {
                    if (elem !== undefined) {
                        if (typeof _content === "string") {
                            // Determine parent html tag.
                            var norm = _content.replace(/<([^\s>]+)\s?/, "#$1#"), tag = norm.split("#")[1];
                            if (tag !== undefined) {
                                var child = this.new(tag);
                                elem.appendChild(child);
                                child.outerHTML = _content;
                                ret = child;
                            } else elem.innerHTML += _content;
                        } else {
                            elem.appendChild(_content);
                            ret = _content;
                        }
                    }
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * Return html element value
     * @return {string}
     */ key: "val",
            value: function val(_id) {
                var ret = "";
                try {
                    if (this.get(_id) !== undefined) ret = this.get(_id).value;
                } catch (e) {
                    console.log(e);
                }
                return ret;
            }
        },
        {
            /**
     * @param _elmt {string|HTMLElement}
     * @param _obj {{alignItems?: string, alignContent?: string, justifyContent?: string, flexDirection?: string, flex?: string, overflowY?: string, overflowX?: string, overflow?: string, font?: string, WebkitTransition?: string, msTransition?: string, transition?: string, WebkitAnimation?: string, msAnimation?: string, animation?: string, WebkitTransform?: string, msTransform?: string, transform?: string, fontStyle?: string, fontWeight?: string, fontFamily?: string, fontSize?: string, boxShadow?: string, borderRadius?: string, borderSize?: string, borderColor?: string, borderStyle?: string, border?: string, color?: string, zIndex?: string, transitionDuration?: string, transitionProperty?: string, opacity?: string, left?: string, bottom?: string, right?: string, top?: string, maxHeight?: string, maxWidth?: string, minWidth?: string, minHeight?: string, height?: string, width?: string, position?: string, color?: string, paddingLeft?: string, paddingBottom?: string, paddingTop?: string, paddingRight?: string, marginLeft?: string, marginBottom?: string, margin?: string, padding?: string, marginTop?: string, marginRight?: string, background?: string, backgroundImage?: string, backgroundColor?: string, backgroundSize?: string, backgroundRepeat?: string, backgroundPosition?: string, display: string}}
     */ key: "css",
            value: function css(_elmt, _obj) {
                /**
         * @type {HTMLElement|HTMLCollection}
         */ var elmt = this.get(_elmt);
                try {
                    if (typeof elmt != "undefined" && typeof _obj != "undefined" && elmt.length === undefined && _obj != null) {
                        if (typeof _obj.background == 'string') elmt.style.background = _obj.background;
                        if (typeof _obj.backgroundImage == 'string') elmt.style.backgroundImage = _obj.backgroundImage;
                        if (typeof _obj.backgroundColor == 'string') elmt.style.backgroundColor = _obj.backgroundColor;
                        if (typeof _obj.backgroundSize == 'string') elmt.style.backgroundSize = _obj.backgroundSize;
                        if (typeof _obj.backgroundRepeat == 'string') elmt.style.backgroundRepeat = _obj.backgroundRepeat;
                        if (typeof _obj.backgroundPosition == 'string') elmt.style.backgroundPosition = _obj.backgroundPosition;
                        if (typeof _obj.display == 'string') elmt.style.display = _obj.display;
                        if (typeof _obj.margin == 'string') elmt.style.margin = _obj.margin;
                        if (typeof _obj.padding == 'string') elmt.style.padding = _obj.padding;
                        if (typeof _obj.marginTop == 'string') elmt.style.marginTop = _obj.marginTop;
                        if (typeof _obj.marginRight == 'string') elmt.style.marginRight = _obj.marginRight;
                        if (typeof _obj.marginBottom == 'string') elmt.style.marginBottom = _obj.marginBottom;
                        if (typeof _obj.marginLeft == 'string') elmt.style.marginLeft = _obj.marginLeft;
                        if (typeof _obj.paddingTop == 'string') elmt.style.paddingTop = _obj.paddingTop;
                        if (typeof _obj.paddingRight == 'string') elmt.style.paddingRight = _obj.paddingRight;
                        if (typeof _obj.paddingBottom == 'string') elmt.style.paddingBottom = _obj.paddingBottom;
                        if (typeof _obj.paddingLeft == 'string') elmt.style.paddingLeft = _obj.paddingLeft;
                        if (typeof _obj.color == 'string') elmt.style.color = _obj.color;
                        if (typeof _obj.position == 'string') elmt.style.position = _obj.position;
                        if (typeof _obj.width == 'string') elmt.style.width = _obj.width;
                        if (typeof _obj.height == 'string') elmt.style.height = _obj.height;
                        if (typeof _obj.minWidth == 'string') elmt.style.minWidth = _obj.minWidth;
                        if (typeof _obj.minHeight == 'string') elmt.style.minHeight = _obj.minHeight;
                        if (typeof _obj.maxWidth == 'string') elmt.style.maxWidth = _obj.minWidth;
                        if (typeof _obj.maxHeight == 'string') elmt.style.maxHeight = _obj.maxHeight;
                        if (typeof _obj.top == 'string') elmt.style.top = _obj.top;
                        if (typeof _obj.right == 'string') elmt.style.right = _obj.right;
                        if (typeof _obj.bottom == 'string') elmt.style.bottom = _obj.bottom;
                        if (typeof _obj.left == 'string') elmt.style.left = _obj.left;
                        if (typeof _obj.transitionDuration == 'string') elmt.style.transitionDuration = _obj.transitionDuration;
                        if (typeof _obj.transitionProperty == 'string') elmt.style.transitionProperty = _obj.transitionProperty;
                        if (typeof _obj.opacity == 'string') elmt.style.opacity = _obj.opacity;
                        if (typeof _obj.zIndex == 'string') elmt.style.zIndex = _obj.zIndex;
                        if (typeof _obj.border == 'string') elmt.style.border = _obj.border;
                        if (typeof _obj.borderColor == 'string') elmt.style.borderColor = _obj.borderColor;
                        if (typeof _obj.borderStyle == 'string') elmt.style.borderStyle = _obj.borderStyle;
                        if (typeof _obj.borderSize == 'string') elmt.style.borderSize = _obj.borderSize;
                        if (typeof _obj.borderRadius == 'string') elmt.style.borderRadius = _obj.borderRadius;
                        if (typeof _obj.boxShadow == 'string') elmt.style.boxShadow = _obj.boxShadow;
                        if (typeof _obj.fontSize == 'string') elmt.style.fontSize = _obj.fontSize;
                        if (typeof _obj.fontFamily == 'string') elmt.style.fontFamily = _obj.fontFamily;
                        if (typeof _obj.fontWeight == 'string') elmt.style.fontWeight = _obj.fontWeight;
                        if (typeof _obj.fontStyle == 'string') elmt.style.fontStyle = _obj.fontStyle;
                        if (typeof _obj.transform == 'string') elmt.style.transform = _obj.transform;
                        if (typeof _obj.WebkitTransform == 'string') elmt.style.WebkitTransform = _obj.WebkitTransform;
                        if (typeof _obj.msTransform == 'string') elmt.style.msTransform = _obj.msTransform;
                        if (typeof _obj.animation == 'string') elmt.style.animation = _obj.animation;
                        if (typeof _obj.WebkitAnimation == 'string') elmt.style.WebkitAnimation = _obj.WebkitAnimation;
                        if (typeof _obj.msAnimation == 'string') elmt.style.msAnimation = _obj.msAnimation;
                        if (typeof _obj.transition == 'string') elmt.style.transition = _obj.transition;
                        if (typeof _obj.WebkitTransition == 'string') elmt.style.WebkitTransition = _obj.WebkitTransition;
                        if (typeof _obj.msTransition == 'string') elmt.style.msTransition = _obj.msTransition;
                        if (typeof _obj.overflowX == 'string') elmt.style.overflowX = _obj.overflowX;
                        if (typeof _obj.overflowY == 'string') elmt.style.overflowY = _obj.overflowY;
                        if (typeof _obj.overflow == 'string') elmt.style.overflow = _obj.overflow;
                        if (typeof _obj.flex === "string") elmt.style.flex = _obj.flex;
                        if (typeof _obj.flexDirection === "string") elmt.style.flexDirection = _obj.flexDirection;
                        if (typeof _obj.justifyContent === "string") elmt.style.justifyContent = _obj.justifyContent;
                        if (typeof _obj.alignItems === "string") elmt.style.alignItems = _obj.alignItems;
                        if (typeof _obj.alignContent === "string") elmt.style.alignContent = _obj.alignContent;
                    }
                } catch (e) {
                    console.log(e);
                }
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * Returns html element coords in the document.
     * @return {{x: number, y: number}}
     */ key: "getCoords",
            value: function getCoords(_id) {
                var obj = this.get(_id), objet = {
                    x: 0,
                    y: 0
                }, prev = {
                    x: 0,
                    y: 0
                };
                try {
                    while(obj !== document){
                        var x = obj.offsetLeft, y = obj.offsetTop;
                        //console.log(obj);
                        if (typeof obj.scrollLeft != "undefined") x -= obj.scrollLeft;
                        if (obj.scrollTop !== undefined) y -= obj.scrollTop;
                        if (obj.parentNode.offsetLeft !== x) {
                            objet.x += x;
                            prev.x = x;
                        }
                        if (obj.parentNode.offsetTop !== y) {
                            objet.y += y;
                            prev.y = y;
                        }
                        //console.log(obj.scrollTop, objet.x, objet.y);
                        obj = obj.parentNode;
                    }
                } catch (e) {
                //console.log(e);
                }
                return objet;
            }
        },
        {
            /**
     * @param _obj {{name: string, object: string|HTMLElement, callback: Function}}
     * Add event to an html element.
     */ key: "event",
            value: function event(_obj) {
                /**
         * typeof _obj = {name: string, object: string or DOMobject, callback: function}
         */ var matches = function() {
                    return _obj != null && _obj.name !== undefined && _obj.object !== undefined && _obj.callback !== undefined;
                };
                try {
                    if (matches()) {
                        var names = _obj.name.split(','), objects = null;
                        if (typeof _obj.object === "string") {
                            var _this = this, _loop1 = function(i) {
                                var _this2 = _this, _loop = function(j) {
                                    var selected = _this2.get(objects[j]);
                                    if (selected !== undefined) {
                                        if (selected.length !== undefined) {
                                            for(var k = 0; k < selected.length; k++){
                                                selected[k].addEventListener(names[i], function(e) {
                                                    _obj.callback(e);
                                                }, false);
                                            }
                                        } else {
                                            selected.addEventListener(names[i], function(e) {
                                                _obj.callback(e);
                                            }, false);
                                        }
                                    }
                                };
                                for(var j = 0; j < objects.length; j++)_loop(j);
                            };
                            objects = _obj.object.split(',');
                            for(var i = 0; i < names.length; i++)_loop1(i);
                        } else {
                            objects = this.get(_obj.object);
                            //console.log(objects);
                            for(var i1 = 0; i1 < names.length; i1++){
                                objects.addEventListener(names[i1], function(e) {
                                    _obj.callback(e);
                                }, false);
                            }
                        }
                    } else console.log("dc-event: Object param not match !!!");
                } catch (e) {
                    console.log(e);
                }
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * Defines css class to an html element.
     * @param _class {string}
     */ key: "setClass",
            value: function setClass(_id, _class) {
                try {
                    if (typeof _class !== "undefined" && _class !== "") {
                        var elem = this.get(_id);
                        elem.className = _class;
                    }
                } catch (e) {
                    console.log(e);
                }
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * @param _classes {string|{Array}}
     */ key: "removeClass",
            value: function removeClass(_id, _classes) {
                try {
                    if (typeof _classes !== "undefined" && _classes !== "") {
                        var _this = this;
                        var remove = function(_class) {
                            var elem = _this.get(_id), classe = _class;
                            if (elem.className.indexOf(" " + _class + " ") !== -1) classe = " " + _class + " ";
                            else if (elem.className.indexOf(_class + " ") !== -1) classe = _class + " ";
                            else if (elem.className.indexOf(" " + _class) !== -1) classe = " " + _class;
                            elem.className = elem.className.replace(classe, "");
                        };
                        if (typeof _classes === "string") remove(_classes);
                        else {
                            for(var i = 0; i <= _classes.length; i++)remove(_classes[i]);
                        }
                    }
                } catch (e) {
                    console.log(e);
                }
            }
        },
        {
            /**
     * @param _id {string|HTMLElement}
     * Add class to an html element.
     * @param _class {string}
     */ key: "addClass",
            value: function addClass(_id, _class) {
                try {
                    if (typeof _class !== "undefined" && _class !== "") {
                        var elem = this.get(_id);
                        this.removeClass(elem, _class);
                        elem.className += " " + _class;
                    }
                } catch (e) {
                    console.log(e);
                }
            }
        },
        {
            /**
     * @param _obj {{data: string|FormData|JSON, url: string, type: string, success?: Function, error?: Function, onprogress?: Function, contentType?: string}}
     * @return {Promise<any>}
     */ key: "ajax",
            value: function ajax(_obj) {
                var _this = this;
                return new Promise(function(resolve, reject) {
                    /**
             *
             * @type {XMLHttpRequest}
             */ var requet = _utilitaires.default.setRequet();
                    if (requet != null) {
                        var url = _utilitaires.default.getUrl(_obj.url);
                        if (typeof _obj.data === "string") {
                            try {
                                requet.open(_obj.type, url, true);
                                requet.upload.onprogress = function(e) {
                                    try {
                                        _obj.onprogress(e);
                                    } catch (exc) {}
                                };
                                if (typeof _obj.contentType === "string") requet.setRequestHeader("Content-type", _obj.contentType);
                                else requet.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                                requet.onload = function() {
                                    if (requet.readyState === 4 && requet.status === 200) {
                                        return resolve(requet.responseText);
                                    } else {
                                        return reject(requet);
                                    }
                                };
                                requet.onreadystatechange = function() {
                                    if (requet.readyState === 4 && requet.status === 200) {
                                        try {
                                            _obj.success(requet.responseText);
                                        } catch (exc) {}
                                    } else {
                                        try {
                                            _obj.error();
                                            switch(requet.status){
                                                case 400:
                                                case 401:
                                                case 403:
                                                case 404:
                                                case 500:
                                                    (0, _toast).default({
                                                        text: requet.status + " : Le serveur n'a pas pu traiter votre fichier. Re\xe9sayez avec un autre fichier !",
                                                        position: "center",
                                                        time: 5000,
                                                        radius: 5
                                                    });
                                                    break;
                                            }
                                        } catch (exc) {}
                                    }
                                };
                                requet.send(_obj.data);
                            } catch (e) {}
                        } else if (typeof _obj.data === "object") {
                            try {
                                requet.open(_obj.type, url, true);
                                requet.upload.onprogress = function(e) {
                                    try {
                                        _obj.onprogress(e);
                                    } catch (exc) {}
                                };
                                requet.onload = function() {
                                    if (requet.readyState === 4 && requet.status === 200) {
                                        _obj.success(requet.responseText);
                                        return resolve(requet.responseText);
                                    } else {
                                        try {
                                            _obj.error();
                                            switch(requet.status){
                                                case 400:
                                                case 401:
                                                case 403:
                                                case 404:
                                                case 500:
                                                    (0, _toast).default({
                                                        text: requet.status + " : Le serveur n'a pas pu traiter votre fichier. Re\xe9sayez avec un autre fichier !",
                                                        position: "center",
                                                        time: 5000,
                                                        radius: 5
                                                    });
                                                    break;
                                            }
                                        } catch (exc) {}
                                        return reject(requet);
                                    }
                                };
                                requet.send(_obj.data);
                            } catch (e) {}
                        }
                    }
                    _this.requet.push(requet);
                });
            }
        },
        {
            /**
     * Initializing the DOM
     */ key: "init",
            value: function init() {
                var elem = this.get('#dc-notify');
                if (elem === undefined) {
                    this.remove('#dc-notify');
                    this.remove("#dc-alert-js");
                    this.append('body', '<div id="dc-alert-js" class="dc-alert __dcx-mac"><div class="dcx-alert__header" id="dc-alert-js-title">&nbsp;</div><div class="dcx-alert__content" id="dc-alert-js-content">&nbsp;</div><div class="dcx-alert__footer"></div></div>');
                    this.append('body', '<div id="dc-notify" class="dcx-list"></div>');
                    this.append('body', '<div id="dc-notify-controller"><span id="dc-notify-controller__tooltip"><button class="dcx-fab fab__small cf-theme"><i class="DGfi-notifications"></i><div id="dc-notify-controller__badge" class="__badge">120</div></button></span></div>');
                }
            }
        }
    ]);
    return DcCoding;
}();
var _default = new DcCoding();
exports.default = _default;
